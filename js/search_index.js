var search_data = {"index":{"searchIndex":["object","rspec","core","anonymousexamplegroup","backtraceformatter","bisect","bisectfailederror","channel","coordinator","exampleminimizer","forkrunner","captureformatter","rundispatcher","notifier","server","shellcommand","shellrunner","configuration","deprecationreporterbuffer","exposecurrentexample","mustbeconfiguredbeforeexamplegroupserror","configurationoptions","drboptions","drbrunner","dsl","rspec","didyoumean","example","executionresult","procsy","examplegroup","examplestatusdumper","examplestatusmerger","examplestatusparser","examplestatuspersister","exclusionrules","filtermanager","filterrules","filterableitemrepository","queryoptimized","updateoptimized","flatmap","formatters","basebisectformatter","baseformatter","basetextformatter","bisectdrbformatter","bisectdebugformatter","bisectprogressformatter","consolecodes","deprecationformatter","delayedprinter","filestream","immediateprinter","raiseerrorstream","documentationformatter","exceptionpresenter","factory","commonbacktracetruncater","emptybacktraceformatter","failurelistformatter","fallbackmessageformatter","helpers","htmlformatter","htmlprinter","htmlsnippetextractor","coderayconverter","nullconverter","jsonformatter","loader","profileformatter","progressformatter","protocol","snippetextractor","syntaxhighlighter","coderayimplementation","nosyntaxhighlightingimplementation","windowsimplementation","hashimitatable","classmethods","hooks","aftercontexthook","afterhook","aroundhook","beforehook","hookcollections","inclusionrules","invocations","bisect","drbwithfallback","initializeproject","printversion","legacyexamplegrouphash","memoizedhelpers","classmethods","contexthookmemoized","after","before","nonthreadsafememoized","threadsafememoized","metadata","examplegrouphash","examplehash","hashpopulator","metadatafilter","minitestassertionsadapter","mockingadapters","flexmock","mocha","null","rr","rspec","multipleexceptionerror","interfacetag","notifications","customnotification","deprecationnotification","examplenotification","examplesnotification","failedexamplenotification","nullcolorizer","nullnotification","pendingexamplefailedasexpectednotification","pendingexamplefixednotification","profilenotification","seednotification","skippedexamplenotification","summarynotification","nullreporter","ordering","configurationmanager","custom","identity","random","registry","outputwrapper","parser","pending","pendingexamplefixederror","skipdeclaredinexample","profiler","projectinitializer","raketask","reporter","rubyproject","runner","sandbox","set","sharedcontext","sharedexamplegroup","registry","topleveldsl","sharedexamplegroupinclusionstackframe","sharedexamplegroupmodule","shellescape","suitehookcontext","testunitassertionsadapter","time","version","warnings","world","null","examplegroups","<<()","[]()","[]()","[]()","[]=()","__shared_context_recordings()","_base_name_for()","abort_with()","add()","add()","add()","add()","add()","add()","add_dir_to_load_path()","add_example()","add_failure_exit_code()","add_filter()","add_formatter()","add_formatters()","add_full_description()","add_ids()","add_libs()","add_location()","add_read_only_setting()","add_requires()","add_setting()","add_setting()","add_to_load_path()","add_with_low_priority()","add_with_low_priority()","add_with_low_priority()","after()","after()","alias_example_group_to()","alias_example_to()","alias_it_behaves_like_to()","alias_it_should_behave_like_to()","all_example_groups()","all_example_groups()","all_examples()","all_hooks_for()","announce_exclusion_filter()","announce_filters()","announce_inclusion_filter()","append()","append()","append_after()","append_after()","append_before()","append_before()","apply?()","apply_derived_metadata_to()","around()","around()","article()","article()","ascend()","ascend_until()","ascending()","assertions()","assign_const()","attempt_to_add_rspec_terms_to_coderay_keywords()","attr_accessor()","autorun()","autorun_disabled?()","backtrace_exclusion_patterns()","backtrace_exclusion_patterns=()","backtrace_inclusion_patterns()","backtrace_inclusion_patterns=()","backtrace_line()","backwards_compatibility_default_proc()","base_name_for()","before()","before()","before_context_ivars()","bisect()","bisect()","bisect_aborted()","bisect_complete()","bisect_dependency_check_failed()","bisect_dependency_check_failed()","bisect_dependency_check_passed()","bisect_dependency_check_passed()","bisect_dependency_check_started()","bisect_environment_hash()","bisect_failed()","bisect_individual_run_complete()","bisect_individual_run_complete()","bisect_individual_run_start()","bisect_original_run_complete()","bisect_original_run_complete()","bisect_over()","bisect_repro_command()","bisect_round_detected_multiple_culprits()","bisect_round_detected_multiple_culprits()","bisect_round_ignoring_ids()","bisect_round_ignoring_ids()","bisect_round_started()","bisect_round_started()","bisect_runner=()","bisect_runner_class()","bisect_starting()","bisect_with()","build()","build()","build()","build_hash_from()","call()","call()","call()","call()","call()","call()","capture_run_results()","change_global_dsl()","children()","clear()","clear()","clear()","clear_examples()","close()","close()","close()","close()","close_after()","color()","color_enabled?()","color_mode()","colorized_formatted_backtrace()","colorized_formatted_backtrace()","colorized_message_lines()","colorized_message_lines()","colorized_rerun_commands()","colorized_totals_line()","command_for()","conditionally_quote()","config_colors_to_methods()","configuration()","configuration()","configure()","configure()","configure()","configure_example()","configure_expectation_framework()","configure_filter_manager()","configure_group()","configure_mock_framework()","console_code_for()","const_missing()","constant_scope_for()","convert()","convert()","create()","create()","current_backtrace()","current_example()","current_example=()","currently_executing_a_context_hook?()","currently_needed_ids()","declaration_locations()","deep_hash_dup()","default_formatter()","default_formatter=()","default_path=()","define_alias()","define_derived_metadata()","define_example_group_method()","define_example_method()","define_nested_shared_group_method()","define_predicate()","define_reader()","definitions()","delegate_to_metadata()","delegate_to_metadata()","delegate_to_ordering_manager()","delete()","delete()","delete()","delete()","delete()","deprecate()","deprecation()","deprecation()","deprecation()","deprecation_message_for()","deprecation_stream=()","deprecation_summary()","deprecation_summary()","deprecation_summary()","descendant_filtered_examples()","descendants()","described_class()","description()","description()","description()","description()","description()","description()","determine_root()","disable_autorun!()","disable_monkey_patching!()","disambiguate()","dispatch_specs()","display_exception()","display_exception=()","drb_argv()","drb_port()","drb_port()","dump()","dump()","dump_failures()","dump_pending()","dump_profile()","dump_profile()","dump_profile()","dump_profile_slowest_example_groups()","dump_profile_slowest_examples()","dump_summary()","dump_summary()","dump_summary()","duplicate_with()","each()","each_instance_variable_for_example()","each_pair()","each_pair()","empty?()","empty?()","empty?()","empty?()","ensure_example_groups_are_configured()","ensure_timing_set()","escape()","everything_filtered_message()","example_count()","example_count()","example_failed()","example_failed()","example_failed()","example_failed()","example_failed()","example_failed()","example_finished()","example_finished()","example_group()","example_group_aliases()","example_group_finished()","example_group_finished()","example_group_finished()","example_group_started()","example_group_started()","example_group_started()","example_group_started()","example_group_started()","example_groups()","example_passed()","example_passed()","example_passed()","example_passed()","example_pending()","example_pending()","example_pending()","example_pending()","example_skipped?()","example_started()","example_started()","example_started()","example_started()","example_status_persistence_file_path=()","examples()","examples()","exception()","exception_count_description()","exclude()","exclude?()","exclude_only()","exclude_pattern=()","exclude_with_low_priority()","exclusion_filter()","exclusion_filter()","exclusion_filter=()","execute_with()","executed?()","exit_early()","expect_with()","expectation_framework=()","expectation_frameworks()","expose_current_running_example_as()","expose_dsl_globally=()","expose_dsl_globally?()","expose_example_group_alias()","expose_example_group_alias_globally()","expose_globally!()","expose_globally!()","exposed_globally?()","exposed_globally?()","expression_lines()","expression_node()","expression_outmost_node?()","extend()","extract_expression_lines_at()","extract_line_at()","fail_fast=()","fail_fast_limit_met?()","fail_with_exception()","failed_examples()","failure_count()","failure_notifications()","fetch()","fetch()","fetch()","fetch_or_store()","fetch_or_store()","fetch_or_store()","files_or_directories_to_run=()","files_to_run()","filter()","filter=()","filter_applies?()","filter_gem()","filter_gems_from_backtrace()","filter_manager()","filter_run()","filter_run_excluding()","filter_run_including()","filter_run_when_matching()","filtered_examples()","find()","find_and_eval_shared()","find_first_parent_containing()","find_items_for()","find_minimal_repro()","finish()","flat_map()","flush()","for()","for()","for()","for_failed_spec_run()","for_filtered_examples()","force()","force()","format_backtrace()","format_backtrace()","format_docstrings()","format_docstrings_block()","format_duration()","format_seconds()","formatted_backtrace()","formatted_backtrace()","formatted_cause()","formatted_duration()","formatted_inclusion_location()","formatted_load_time()","formatter=()","formatter_loader()","formatters()","formatters()","framework_name()","framework_name()","framework_name()","framework_name()","from_hash()","full_backtrace=()","full_backtrace?()","full_backtrace?()","full_description()","full_description=()","fully_formatted()","fully_formatted()","fully_formatted()","fully_formatted()","fully_formatted()","fully_formatted_failed_examples()","fully_formatted_lines()","fully_formatted_lines()","fully_formatted_pending_examples()","handle_interrupt()","hash_attribute_names()","hash_with_backwards_compatibility_default_proc()","highlight()","highlight_syntax()","highlight_syntax()","highlight_syntax()","hook_description()","hook_expression()","hook_expression()","hook_intention()","hook_intention()","hooks()","hooks()","id()","id()","id_from()","idempotently_define_singleton_method()","in_project_source_dir_regex()","include()","include()","include?()","include_context()","include_context()","include_example?()","include_example?()","include_example?()","include_examples()","include_in()","include_only()","include_with_low_priority()","included()","included()","included()","inclusion_filter()","inclusion_filter()","inclusion_filter=()","inherited()","inspect()","inspect()","inspect()","inspect()","inspect_output()","installed_at_exit?()","instance_exec()","invoke()","is_expected()","isolate_for_context_hook()","items_for()","items_for()","last_run_statuses()","least_indentation_from()","let()","let!()","libs=()","line_range_of_expression()","line_range_of_location_nodes_in_expression()","lines_around()","load_from()","load_spec_files()","location_nodes_at_beginning_line()","location_rerun_argument()","location_tuple_from()","make_example_group_header_red()","make_example_group_header_yellow()","make_header_red()","make_header_yellow()","mark_fixed!()","mark_pending!()","mark_skipped!()","matching_hooks_for()","merge()","merge()","merge()","message()","message()","message()","message()","message()","message()","message()","message_lines()","message_lines()","metadata()","metadata()","method_missing()","mock_framework()","mock_framework=()","mock_with()","move_progress()","name()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next_runnable_index_for()","non_example_failure()","non_example_failure=()","notifications()","notify()","notify_non_example_exception()","notify_results()","num_example_groups_defined_in()","on_example_group_definition()","on_example_group_definition_callbacks()","only_failures_but_not_configured?()","options()","order()","order()","order()","order=()","ordered_example_groups()","ordering_strategy()","organize_ids()","original_locations()","original_results()","original_results()","output_stream=()","parent_groups()","parse()","parse()","parse()","parse()","parse_id()","path_to_executable()","pattern=()","pending()","pending_count()","pending_examples()","pending_notifications()","percentage()","perform_at_exit()","persist()","persist()","play_onto()","pluralize()","populate()","post_process()","preceding_declaration_line()","prepare_default()","prepare_default()","prepare_example_filtering()","prepend()","prepend()","prepend()","prepend_after()","prepend_after()","prepend_before()","prepend_before()","print_deferred_deprecation_warnings()","print_deprecation_message()","print_deprecation_message()","print_example_failed()","print_example_group_end()","print_example_group_start()","print_example_passed()","print_example_pending()","print_html_start()","print_summary()","printer()","processable_hooks_for()","profile_examples()","prune()","publish()","publish()","puts()","puts()","quote()","raise_errors_for_deprecations!()","raise_on_warning=()","receive()","record()","record()","record_finished()","register()","register()","register()","register_global_singleton_context_hooks()","register_globals()","register_listener()","register_ordering()","registered_example_group_files()","registered_example_group_files()","registered_listeners()","relative_path()","relative_path_regex()","remove_all_constants()","remove_example()","remove_globally!()","remove_globally!()","report()","report_filter_message()","reporter()","reporter()","repro_command_for_currently_needed_ids()","repro_command_from()","requires=()","rerun_argument()","reset()","reset()","reset()","reset_filters()","reset_memoized()","reset_reporter()","respond_to?()","root()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run_after_context_hooks()","run_before_context_hooks()","run_examples()","run_owned_hooks_for()","run_specs()","run_task()","running_in_drb?()","sandboxed()","seed()","seed()","seed=()","seed_used?()","seed_used?()","send()","set_aggregate_failures_exception()","set_exception()","set_exception()","set_it_up()","set_ivars()","setup()","setup_default()","setup_mocks_for_rspec()","setup_mocks_for_rspec()","setup_mocks_for_rspec()","setup_mocks_for_rspec()","setup_mocks_for_rspec()","shared_context()","shared_context_metadata_behavior=()","shared_example_group_inclusions()","shared_example_group_registry()","shared_examples()","shared_examples()","shared_examples_for()","shell_allows_unquoted_ids?()","should()","should_not()","shutdown()","silence_metadata_example_group_deprecations()","singleton_class()","skip()","skip_with_exception()","slow_duration()","slowest_examples()","slowest_groups()","snippet()","snippet_for()","source_from_file()","source_from_file()","spec_files_with_failures()","spec_opts_without_bisect()","split_file_scoped_rules()","standalone?()","start()","start()","start()","start()","start()","start()","start_dump()","start_dump()","start_dump()","stash_deprecation_message()","stop()","stop()","stop()","store_before_context_ivars()","subclass()","subject()","subject()","subject!()","summarize()","summarize()","summary()","superclass_before_context_ivars()","superclass_metadata()","syntax_highlighter()","teardown_mocks_for_rspec()","teardown_mocks_for_rspec()","teardown_mocks_for_rspec()","teardown_mocks_for_rspec()","teardown_mocks_for_rspec()","to_h()","to_h()","to_proc()","to_s()","to_s()","top_level?()","top_level_description()","totals_line()","trap_interrupt()","traverse_example_group_trees_until()","traverse_example_group_trees_until()","traverse_tree_until()","treat_symbols_as_metadata_keys_with_true_values=()","unclosed_tokens_in_line_range()","update_inherited_metadata()","update_inherited_metadata()","use_only()","use_only()","used?()","used_random_seed?()","verify_mocks_for_rspec()","verify_mocks_for_rspec()","verify_mocks_for_rspec()","verify_mocks_for_rspec()","verify_mocks_for_rspec()","warn_deprecation()","warn_with()","warnings=()","warnings?()","when_first_matching_example_defined()","with_clean_environment()","with_clean_environment=()","with_frame()","with_replaced_metadata()","with_suite_hooks()","with_truncated_backtrace()","world()","wrap()","wrap()","wrap()"],"longSearchIndex":["object","rspec","rspec::core","rspec::core::anonymousexamplegroup","rspec::core::backtraceformatter","rspec::core::bisect","rspec::core::bisect::bisectfailederror","rspec::core::bisect::channel","rspec::core::bisect::coordinator","rspec::core::bisect::exampleminimizer","rspec::core::bisect::forkrunner","rspec::core::bisect::forkrunner::captureformatter","rspec::core::bisect::forkrunner::rundispatcher","rspec::core::bisect::notifier","rspec::core::bisect::server","rspec::core::bisect::shellcommand","rspec::core::bisect::shellrunner","rspec::core::configuration","rspec::core::configuration::deprecationreporterbuffer","rspec::core::configuration::exposecurrentexample","rspec::core::configuration::mustbeconfiguredbeforeexamplegroupserror","rspec::core::configurationoptions","rspec::core::drboptions","rspec::core::drbrunner","rspec::core::dsl","rspec::core::dsl::rspec","rspec::core::didyoumean","rspec::core::example","rspec::core::example::executionresult","rspec::core::example::procsy","rspec::core::examplegroup","rspec::core::examplestatusdumper","rspec::core::examplestatusmerger","rspec::core::examplestatusparser","rspec::core::examplestatuspersister","rspec::core::exclusionrules","rspec::core::filtermanager","rspec::core::filterrules","rspec::core::filterableitemrepository","rspec::core::filterableitemrepository::queryoptimized","rspec::core::filterableitemrepository::updateoptimized","rspec::core::flatmap","rspec::core::formatters","rspec::core::formatters::basebisectformatter","rspec::core::formatters::baseformatter","rspec::core::formatters::basetextformatter","rspec::core::formatters::bisectdrbformatter","rspec::core::formatters::bisectdebugformatter","rspec::core::formatters::bisectprogressformatter","rspec::core::formatters::consolecodes","rspec::core::formatters::deprecationformatter","rspec::core::formatters::deprecationformatter::delayedprinter","rspec::core::formatters::deprecationformatter::filestream","rspec::core::formatters::deprecationformatter::immediateprinter","rspec::core::formatters::deprecationformatter::raiseerrorstream","rspec::core::formatters::documentationformatter","rspec::core::formatters::exceptionpresenter","rspec::core::formatters::exceptionpresenter::factory","rspec::core::formatters::exceptionpresenter::factory::commonbacktracetruncater","rspec::core::formatters::exceptionpresenter::factory::emptybacktraceformatter","rspec::core::formatters::failurelistformatter","rspec::core::formatters::fallbackmessageformatter","rspec::core::formatters::helpers","rspec::core::formatters::htmlformatter","rspec::core::formatters::htmlprinter","rspec::core::formatters::htmlsnippetextractor","rspec::core::formatters::htmlsnippetextractor::coderayconverter","rspec::core::formatters::htmlsnippetextractor::nullconverter","rspec::core::formatters::jsonformatter","rspec::core::formatters::loader","rspec::core::formatters::profileformatter","rspec::core::formatters::progressformatter","rspec::core::formatters::protocol","rspec::core::formatters::snippetextractor","rspec::core::formatters::syntaxhighlighter","rspec::core::formatters::syntaxhighlighter::coderayimplementation","rspec::core::formatters::syntaxhighlighter::nosyntaxhighlightingimplementation","rspec::core::formatters::syntaxhighlighter::windowsimplementation","rspec::core::hashimitatable","rspec::core::hashimitatable::classmethods","rspec::core::hooks","rspec::core::hooks::aftercontexthook","rspec::core::hooks::afterhook","rspec::core::hooks::aroundhook","rspec::core::hooks::beforehook","rspec::core::hooks::hookcollections","rspec::core::inclusionrules","rspec::core::invocations","rspec::core::invocations::bisect","rspec::core::invocations::drbwithfallback","rspec::core::invocations::initializeproject","rspec::core::invocations::printversion","rspec::core::legacyexamplegrouphash","rspec::core::memoizedhelpers","rspec::core::memoizedhelpers::classmethods","rspec::core::memoizedhelpers::contexthookmemoized","rspec::core::memoizedhelpers::contexthookmemoized::after","rspec::core::memoizedhelpers::contexthookmemoized::before","rspec::core::memoizedhelpers::nonthreadsafememoized","rspec::core::memoizedhelpers::threadsafememoized","rspec::core::metadata","rspec::core::metadata::examplegrouphash","rspec::core::metadata::examplehash","rspec::core::metadata::hashpopulator","rspec::core::metadatafilter","rspec::core::minitestassertionsadapter","rspec::core::mockingadapters","rspec::core::mockingadapters::flexmock","rspec::core::mockingadapters::mocha","rspec::core::mockingadapters::null","rspec::core::mockingadapters::rr","rspec::core::mockingadapters::rspec","rspec::core::multipleexceptionerror","rspec::core::multipleexceptionerror::interfacetag","rspec::core::notifications","rspec::core::notifications::customnotification","rspec::core::notifications::deprecationnotification","rspec::core::notifications::examplenotification","rspec::core::notifications::examplesnotification","rspec::core::notifications::failedexamplenotification","rspec::core::notifications::nullcolorizer","rspec::core::notifications::nullnotification","rspec::core::notifications::pendingexamplefailedasexpectednotification","rspec::core::notifications::pendingexamplefixednotification","rspec::core::notifications::profilenotification","rspec::core::notifications::seednotification","rspec::core::notifications::skippedexamplenotification","rspec::core::notifications::summarynotification","rspec::core::nullreporter","rspec::core::ordering","rspec::core::ordering::configurationmanager","rspec::core::ordering::custom","rspec::core::ordering::identity","rspec::core::ordering::random","rspec::core::ordering::registry","rspec::core::outputwrapper","rspec::core::parser","rspec::core::pending","rspec::core::pending::pendingexamplefixederror","rspec::core::pending::skipdeclaredinexample","rspec::core::profiler","rspec::core::projectinitializer","rspec::core::raketask","rspec::core::reporter","rspec::core::rubyproject","rspec::core::runner","rspec::core::sandbox","rspec::core::set","rspec::core::sharedcontext","rspec::core::sharedexamplegroup","rspec::core::sharedexamplegroup::registry","rspec::core::sharedexamplegroup::topleveldsl","rspec::core::sharedexamplegroupinclusionstackframe","rspec::core::sharedexamplegroupmodule","rspec::core::shellescape","rspec::core::suitehookcontext","rspec::core::testunitassertionsadapter","rspec::core::time","rspec::core::version","rspec::core::warnings","rspec::core::world","rspec::core::world::null","rspec::examplegroups","rspec::core::set#<<()","rspec::core::filterrules#[]()","rspec::core::filterrules#[]()","rspec::core::hashimitatable#[]()","rspec::core::hashimitatable#[]=()","rspec::core::sharedcontext#__shared_context_recordings()","rspec::examplegroups::_base_name_for()","rspec::core::reporter#abort_with()","rspec::core::filterrules#add()","rspec::core::filterrules#add()","rspec::core::formatters::loader#add()","rspec::core::inclusionrules#add()","rspec::core::multipleexceptionerror::interfacetag#add()","rspec::core::sharedexamplegroup::registry#add()","rspec::core::rubyproject::add_dir_to_load_path()","rspec::core::examplegroup::add_example()","rspec::core::drboptions#add_failure_exit_code()","rspec::core::drboptions#add_filter()","rspec::core::configuration#add_formatter()","rspec::core::drboptions#add_formatters()","rspec::core::drboptions#add_full_description()","rspec::core::filtermanager#add_ids()","rspec::core::drboptions#add_libs()","rspec::core::filtermanager#add_location()","rspec::core::configuration::add_read_only_setting()","rspec::core::drboptions#add_requires()","rspec::core::configuration::add_setting()","rspec::core::configuration#add_setting()","rspec::core::rubyproject::add_to_load_path()","rspec::core::filterrules#add_with_low_priority()","rspec::core::filterrules#add_with_low_priority()","rspec::core::inclusionrules#add_with_low_priority()","rspec::core::configuration#after()","rspec::core::hooks#after()","rspec::core::configuration#alias_example_group_to()","rspec::core::configuration#alias_example_to()","rspec::core::configuration#alias_it_behaves_like_to()","rspec::core::configuration#alias_it_should_behave_like_to()","rspec::core::world#all_example_groups()","rspec::core::world::null::all_example_groups()","rspec::core::world#all_examples()","rspec::core::hooks::hookcollections#all_hooks_for()","rspec::core::world#announce_exclusion_filter()","rspec::core::world#announce_filters()","rspec::core::world#announce_inclusion_filter()","rspec::core::filterableitemrepository::queryoptimized#append()","rspec::core::filterableitemrepository::updateoptimized#append()","rspec::core::configuration#append_after()","rspec::core::hooks#append_after()","rspec::core::configuration#append_before()","rspec::core::hooks#append_before()","rspec::core::metadatafilter::apply?()","rspec::core::configuration#apply_derived_metadata_to()","rspec::core::configuration#around()","rspec::core::hooks#around()","rspec::core::memoizedhelpers::contexthookmemoized::after::article()","rspec::core::memoizedhelpers::contexthookmemoized::before::article()","rspec::core::metadata::ascend()","rspec::core::rubyproject::ascend_until()","rspec::core::metadata::ascending()","rspec::core::minitestassertionsadapter#assertions()","rspec::examplegroups::assign_const()","rspec::core::formatters::syntaxhighlighter::attempt_to_add_rspec_terms_to_coderay_keywords()","rspec::core::hashimitatable::classmethods#attr_accessor()","rspec::core::runner::autorun()","rspec::core::runner::autorun_disabled?()","rspec::core::configuration#backtrace_exclusion_patterns()","rspec::core::configuration#backtrace_exclusion_patterns=()","rspec::core::configuration#backtrace_inclusion_patterns()","rspec::core::configuration#backtrace_inclusion_patterns=()","rspec::core::backtraceformatter#backtrace_line()","rspec::core::metadata::examplegrouphash::backwards_compatibility_default_proc()","rspec::examplegroups::base_name_for()","rspec::core::configuration#before()","rspec::core::hooks#before()","rspec::core::examplegroup::before_context_ivars()","rspec::core::bisect::coordinator#bisect()","rspec::core::bisect::exampleminimizer#bisect()","rspec::core::formatters::bisectprogressformatter#bisect_aborted()","rspec::core::formatters::bisectprogressformatter#bisect_complete()","rspec::core::formatters::bisectdebugformatter#bisect_dependency_check_failed()","rspec::core::formatters::bisectprogressformatter#bisect_dependency_check_failed()","rspec::core::formatters::bisectdebugformatter#bisect_dependency_check_passed()","rspec::core::formatters::bisectprogressformatter#bisect_dependency_check_passed()","rspec::core::formatters::bisectprogressformatter#bisect_dependency_check_started()","rspec::core::bisect::shellcommand#bisect_environment_hash()","rspec::core::formatters::bisectprogressformatter#bisect_failed()","rspec::core::formatters::bisectdebugformatter#bisect_individual_run_complete()","rspec::core::formatters::bisectprogressformatter#bisect_individual_run_complete()","rspec::core::formatters::bisectdebugformatter#bisect_individual_run_start()","rspec::core::formatters::bisectdebugformatter#bisect_original_run_complete()","rspec::core::formatters::bisectprogressformatter#bisect_original_run_complete()","rspec::core::bisect::exampleminimizer#bisect_over()","rspec::core::formatters::bisectprogressformatter#bisect_repro_command()","rspec::core::formatters::bisectdebugformatter#bisect_round_detected_multiple_culprits()","rspec::core::formatters::bisectprogressformatter#bisect_round_detected_multiple_culprits()","rspec::core::formatters::bisectdebugformatter#bisect_round_ignoring_ids()","rspec::core::formatters::bisectprogressformatter#bisect_round_ignoring_ids()","rspec::core::formatters::bisectdebugformatter#bisect_round_started()","rspec::core::formatters::bisectprogressformatter#bisect_round_started()","rspec::core::configuration#bisect_runner=()","rspec::core::configuration#bisect_runner_class()","rspec::core::formatters::bisectprogressformatter#bisect_starting()","rspec::core::bisect::coordinator::bisect_with()","rspec::core::filterrules::build()","rspec::core::filterrules::build()","rspec::core::formatters::exceptionpresenter::factory#build()","rspec::core::metadata::build_hash_from()","rspec::core::didyoumean#call()","rspec::core::example::procsy#call()","rspec::core::invocations::bisect#call()","rspec::core::invocations::drbwithfallback#call()","rspec::core::invocations::initializeproject#call()","rspec::core::invocations::printversion#call()","rspec::core::bisect::server#capture_run_results()","rspec::core::dsl::change_global_dsl()","rspec::core::examplegroup::children()","rspec::core::filterrules#clear()","rspec::core::filterrules#clear()","rspec::core::set#clear()","rspec::clear_examples()","rspec::core::bisect::channel#close()","rspec::core::formatters::baseformatter#close()","rspec::core::formatters::basetextformatter#close()","rspec::core::formatters::jsonformatter#close()","rspec::core::reporter#close_after()","rspec::core::configuration#color()","rspec::core::configuration#color_enabled?()","rspec::core::configuration#color_mode()","rspec::core::formatters::exceptionpresenter#colorized_formatted_backtrace()","rspec::core::notifications::failedexamplenotification#colorized_formatted_backtrace()","rspec::core::formatters::exceptionpresenter#colorized_message_lines()","rspec::core::notifications::failedexamplenotification#colorized_message_lines()","rspec::core::notifications::summarynotification#colorized_rerun_commands()","rspec::core::notifications::summarynotification#colorized_totals_line()","rspec::core::bisect::shellcommand#command_for()","rspec::core::shellescape#conditionally_quote()","rspec::core::formatters::consolecodes#config_colors_to_methods()","rspec::configuration()","rspec::core::mockingadapters::rspec::configuration()","rspec::configure()","rspec::core::configurationoptions#configure()","rspec::core::runner#configure()","rspec::core::configuration#configure_example()","rspec::core::configuration#configure_expectation_framework()","rspec::core::configurationoptions#configure_filter_manager()","rspec::core::configuration#configure_group()","rspec::core::configuration#configure_mock_framework()","rspec::core::formatters::consolecodes#console_code_for()","rspec::const_missing()","rspec::examplegroups::constant_scope_for()","rspec::core::formatters::htmlsnippetextractor::coderayconverter::convert()","rspec::core::formatters::htmlsnippetextractor::nullconverter::convert()","rspec::core::metadata::examplegrouphash::create()","rspec::core::metadata::examplehash::create()","rspec::core::sharedexamplegroupinclusionstackframe::current_backtrace()","rspec::current_example()","rspec::current_example=()","rspec::core::examplegroup::currently_executing_a_context_hook?()","rspec::core::bisect::exampleminimizer#currently_needed_ids()","rspec::core::examplegroup::declaration_locations()","rspec::core::metadata::deep_hash_dup()","rspec::core::configuration#default_formatter()","rspec::core::configuration#default_formatter=()","rspec::core::configuration#default_path=()","rspec::core::configuration::define_alias()","rspec::core::configuration#define_derived_metadata()","rspec::core::examplegroup::define_example_group_method()","rspec::core::examplegroup::define_example_method()","rspec::core::examplegroup::define_nested_shared_group_method()","rspec::core::configuration::define_predicate()","rspec::core::configuration::define_reader()","rspec::core::sharedexamplegroup::topleveldsl::definitions()","rspec::core::example::delegate_to_metadata()","rspec::core::examplegroup::delegate_to_metadata()","rspec::core::configuration::delegate_to_ordering_manager()","rspec::core::filterrules#delete()","rspec::core::filterrules#delete()","rspec::core::filterableitemrepository::queryoptimized#delete()","rspec::core::filterableitemrepository::updateoptimized#delete()","rspec::core::set#delete()","rspec::core::warnings#deprecate()","rspec::core::configuration::deprecationreporterbuffer#deprecation()","rspec::core::formatters::deprecationformatter#deprecation()","rspec::core::reporter#deprecation()","rspec::core::formatters::deprecationformatter#deprecation_message_for()","rspec::core::configuration#deprecation_stream=()","rspec::core::formatters::deprecationformatter#deprecation_summary()","rspec::core::formatters::deprecationformatter::delayedprinter#deprecation_summary()","rspec::core::formatters::deprecationformatter::immediateprinter#deprecation_summary()","rspec::core::examplegroup::descendant_filtered_examples()","rspec::core::examplegroup::descendants()","rspec::core::examplegroup#described_class()","rspec::core::example#description()","rspec::core::examplegroup::description()","rspec::core::filterrules#description()","rspec::core::filterrules#description()","rspec::core::notifications::failedexamplenotification#description()","rspec::core::sharedexamplegroupinclusionstackframe#description()","rspec::core::rubyproject::determine_root()","rspec::core::runner::disable_autorun!()","rspec::core::configuration#disable_monkey_patching!()","rspec::examplegroups::disambiguate()","rspec::core::bisect::forkrunner::rundispatcher#dispatch_specs()","rspec::core::example#display_exception()","rspec::core::example#display_exception=()","rspec::core::drbrunner#drb_argv()","rspec::core::bisect::server#drb_port()","rspec::core::drbrunner#drb_port()","rspec::core::examplestatusdumper::dump()","rspec::core::examplestatusdumper#dump()","rspec::core::formatters::basetextformatter#dump_failures()","rspec::core::formatters::basetextformatter#dump_pending()","rspec::core::formatters::failurelistformatter#dump_profile()","rspec::core::formatters::jsonformatter#dump_profile()","rspec::core::formatters::profileformatter#dump_profile()","rspec::core::formatters::jsonformatter#dump_profile_slowest_example_groups()","rspec::core::formatters::jsonformatter#dump_profile_slowest_examples()","rspec::core::formatters::basetextformatter#dump_summary()","rspec::core::formatters::htmlformatter#dump_summary()","rspec::core::formatters::jsonformatter#dump_summary()","rspec::core::example#duplicate_with()","rspec::core::set#each()","rspec::core::examplegroup::each_instance_variable_for_example()","rspec::core::filterrules#each_pair()","rspec::core::filterrules#each_pair()","rspec::core::filtermanager#empty?()","rspec::core::filterrules#empty?()","rspec::core::filterrules#empty?()","rspec::core::set#empty?()","rspec::core::examplegroup::ensure_example_groups_are_configured()","rspec::core::example::executionresult#ensure_timing_set()","rspec::core::shellescape#escape()","rspec::core::world#everything_filtered_message()","rspec::core::notifications::summarynotification#example_count()","rspec::core::world#example_count()","rspec::core::formatters::basebisectformatter#example_failed()","rspec::core::formatters::documentationformatter#example_failed()","rspec::core::formatters::failurelistformatter#example_failed()","rspec::core::formatters::htmlformatter#example_failed()","rspec::core::formatters::progressformatter#example_failed()","rspec::core::reporter#example_failed()","rspec::core::formatters::basebisectformatter#example_finished()","rspec::core::reporter#example_finished()","rspec::core::example#example_group()","rspec::core::dsl::example_group_aliases()","rspec::core::formatters::documentationformatter#example_group_finished()","rspec::core::profiler#example_group_finished()","rspec::core::reporter#example_group_finished()","rspec::core::formatters::baseformatter#example_group_started()","rspec::core::formatters::documentationformatter#example_group_started()","rspec::core::formatters::htmlformatter#example_group_started()","rspec::core::profiler#example_group_started()","rspec::core::reporter#example_group_started()","rspec::core::world::null::example_groups()","rspec::core::formatters::documentationformatter#example_passed()","rspec::core::formatters::htmlformatter#example_passed()","rspec::core::formatters::progressformatter#example_passed()","rspec::core::reporter#example_passed()","rspec::core::formatters::documentationformatter#example_pending()","rspec::core::formatters::htmlformatter#example_pending()","rspec::core::formatters::progressformatter#example_pending()","rspec::core::reporter#example_pending()","rspec::core::example::executionresult#example_skipped?()","rspec::core::formatters::documentationformatter#example_started()","rspec::core::formatters::htmlformatter#example_started()","rspec::core::profiler#example_started()","rspec::core::reporter#example_started()","rspec::core::configuration#example_status_persistence_file_path=()","rspec::core::examplegroup::examples()","rspec::core::notifications::examplesnotification#examples()","rspec::core::notifications::failedexamplenotification#exception()","rspec::core::multipleexceptionerror#exception_count_description()","rspec::core::filtermanager#exclude()","rspec::core::backtraceformatter#exclude?()","rspec::core::filtermanager#exclude_only()","rspec::core::configuration#exclude_pattern=()","rspec::core::filtermanager#exclude_with_low_priority()","rspec::core::configuration#exclusion_filter()","rspec::core::world#exclusion_filter()","rspec::core::configuration#exclusion_filter=()","rspec::core::hooks::aroundhook#execute_with()","rspec::core::example::procsy#executed?()","rspec::core::reporter#exit_early()","rspec::core::configuration#expect_with()","rspec::core::configuration#expectation_framework=()","rspec::core::configuration#expectation_frameworks()","rspec::core::configuration#expose_current_running_example_as()","rspec::core::configuration#expose_dsl_globally=()","rspec::core::configuration#expose_dsl_globally?()","rspec::core::dsl::expose_example_group_alias()","rspec::core::dsl::expose_example_group_alias_globally()","rspec::core::dsl::expose_globally!()","rspec::core::sharedexamplegroup::topleveldsl::expose_globally!()","rspec::core::dsl::exposed_globally?()","rspec::core::sharedexamplegroup::topleveldsl::exposed_globally?()","rspec::core::formatters::snippetextractor#expression_lines()","rspec::core::formatters::snippetextractor#expression_node()","rspec::core::formatters::snippetextractor#expression_outmost_node?()","rspec::core::configuration#extend()","rspec::core::formatters::snippetextractor::extract_expression_lines_at()","rspec::core::formatters::snippetextractor::extract_line_at()","rspec::core::configuration#fail_fast=()","rspec::core::reporter#fail_fast_limit_met?()","rspec::core::example#fail_with_exception()","rspec::core::notifications::examplesnotification#failed_examples()","rspec::core::notifications::summarynotification#failure_count()","rspec::core::notifications::examplesnotification#failure_notifications()","rspec::core::filterrules#fetch()","rspec::core::filterrules#fetch()","rspec::core::ordering::registry#fetch()","rspec::core::memoizedhelpers::contexthookmemoized::fetch_or_store()","rspec::core::memoizedhelpers::nonthreadsafememoized#fetch_or_store()","rspec::core::memoizedhelpers::threadsafememoized#fetch_or_store()","rspec::core::configuration#files_or_directories_to_run=()","rspec::core::configuration#files_to_run()","rspec::core::configuration#filter()","rspec::core::configuration#filter=()","rspec::core::metadatafilter::filter_applies?()","rspec::core::backtraceformatter#filter_gem()","rspec::core::configuration#filter_gems_from_backtrace()","rspec::core::world#filter_manager()","rspec::core::configuration#filter_run()","rspec::core::configuration#filter_run_excluding()","rspec::core::configuration#filter_run_including()","rspec::core::configuration#filter_run_when_matching()","rspec::core::examplegroup::filtered_examples()","rspec::core::sharedexamplegroup::registry#find()","rspec::core::examplegroup::find_and_eval_shared()","rspec::core::rubyproject::find_first_parent_containing()","rspec::core::filterableitemrepository::queryoptimized#find_items_for()","rspec::core::bisect::exampleminimizer#find_minimal_repro()","rspec::core::reporter#finish()","rspec::core::flatmap::flat_map()","rspec::core::formatters::htmlprinter#flush()","rspec::core::multipleexceptionerror::interfacetag::for()","rspec::core::notifications::customnotification::for()","rspec::core::notifications::examplenotification::for()","rspec::core::bisect::bisectfailederror::for_failed_spec_run()","rspec::core::examplegroup::for_filtered_examples()","rspec::core::configuration#force()","rspec::core::ordering::configurationmanager#force()","rspec::core::backtraceformatter#format_backtrace()","rspec::core::formatters::exceptionpresenter::factory::emptybacktraceformatter::format_backtrace()","rspec::core::configuration#format_docstrings()","rspec::core::configuration#format_docstrings_block()","rspec::core::formatters::helpers::format_duration()","rspec::core::formatters::helpers::format_seconds()","rspec::core::formatters::exceptionpresenter#formatted_backtrace()","rspec::core::notifications::failedexamplenotification#formatted_backtrace()","rspec::core::formatters::exceptionpresenter#formatted_cause()","rspec::core::notifications::summarynotification#formatted_duration()","rspec::core::sharedexamplegroupinclusionstackframe#formatted_inclusion_location()","rspec::core::notifications::summarynotification#formatted_load_time()","rspec::core::configuration#formatter=()","rspec::core::configuration#formatter_loader()","rspec::core::configuration#formatters()","rspec::core::formatters::loader::formatters()","rspec::core::mockingadapters::flexmock::framework_name()","rspec::core::mockingadapters::mocha::framework_name()","rspec::core::mockingadapters::rr::framework_name()","rspec::core::mockingadapters::rspec::framework_name()","rspec::core::notifications::deprecationnotification::from_hash()","rspec::core::configuration#full_backtrace=()","rspec::core::backtraceformatter#full_backtrace?()","rspec::core::configuration#full_backtrace?()","rspec::core::configuration#full_description()","rspec::core::configuration#full_description=()","rspec::core::formatters::exceptionpresenter#fully_formatted()","rspec::core::notifications::failedexamplenotification#fully_formatted()","rspec::core::notifications::seednotification#fully_formatted()","rspec::core::notifications::skippedexamplenotification#fully_formatted()","rspec::core::notifications::summarynotification#fully_formatted()","rspec::core::notifications::examplesnotification#fully_formatted_failed_examples()","rspec::core::formatters::exceptionpresenter#fully_formatted_lines()","rspec::core::notifications::failedexamplenotification#fully_formatted_lines()","rspec::core::notifications::examplesnotification#fully_formatted_pending_examples()","rspec::core::runner::handle_interrupt()","rspec::core::hashimitatable::classmethods#hash_attribute_names()","rspec::core::metadata::examplegrouphash::hash_with_backwards_compatibility_default_proc()","rspec::core::formatters::syntaxhighlighter#highlight()","rspec::core::formatters::syntaxhighlighter::coderayimplementation::highlight_syntax()","rspec::core::formatters::syntaxhighlighter::nosyntaxhighlightingimplementation::highlight_syntax()","rspec::core::formatters::syntaxhighlighter::nosyntaxhighlightingimplementation::highlight_syntax()","rspec::core::hooks::aroundhook#hook_description()","rspec::core::memoizedhelpers::contexthookmemoized::after::hook_expression()","rspec::core::memoizedhelpers::contexthookmemoized::before::hook_expression()","rspec::core::memoizedhelpers::contexthookmemoized::after::hook_intention()","rspec::core::memoizedhelpers::contexthookmemoized::before::hook_intention()","rspec::core::configuration#hooks()","rspec::core::hooks#hooks()","rspec::core::example#id()","rspec::core::examplegroup::id()","rspec::core::metadata::id_from()","rspec::core::examplegroup::idempotently_define_singleton_method()","rspec::core::configuration#in_project_source_dir_regex()","rspec::core::configuration#include()","rspec::core::filtermanager#include()","rspec::core::set#include?()","rspec::core::configuration#include_context()","rspec::core::examplegroup::include_context()","rspec::core::filterrules#include_example?()","rspec::core::filterrules#include_example?()","rspec::core::inclusionrules#include_example?()","rspec::core::examplegroup::include_examples()","rspec::core::sharedexamplegroupmodule#include_in()","rspec::core::filtermanager#include_only()","rspec::core::filtermanager#include_with_low_priority()","rspec::core::hashimitatable::included()","rspec::core::sharedcontext#included()","rspec::core::sharedexamplegroupmodule#included()","rspec::core::configuration#inclusion_filter()","rspec::core::world#inclusion_filter()","rspec::core::configuration#inclusion_filter=()","rspec::core::formatters::basebisectformatter::inherited()","rspec::core::example#inspect()","rspec::core::example::procsy#inspect()","rspec::core::examplegroup#inspect()","rspec::core::sharedexamplegroupmodule#inspect()","rspec::core::example#inspect_output()","rspec::core::runner::installed_at_exit?()","rspec::core::example#instance_exec()","rspec::core::runner::invoke()","rspec::core::memoizedhelpers#is_expected()","rspec::core::memoizedhelpers::contexthookmemoized::isolate_for_context_hook()","rspec::core::filterableitemrepository::queryoptimized#items_for()","rspec::core::filterableitemrepository::updateoptimized#items_for()","rspec::core::configuration#last_run_statuses()","rspec::core::formatters::snippetextractor::least_indentation_from()","rspec::core::memoizedhelpers::classmethods#let()","rspec::core::memoizedhelpers::classmethods#let!()","rspec::core::configuration#libs=()","rspec::core::formatters::snippetextractor#line_range_of_expression()","rspec::core::formatters::snippetextractor#line_range_of_location_nodes_in_expression()","rspec::core::formatters::htmlsnippetextractor#lines_around()","rspec::core::examplestatuspersister::load_from()","rspec::core::configuration#load_spec_files()","rspec::core::formatters::snippetextractor#location_nodes_at_beginning_line()","rspec::core::example#location_rerun_argument()","rspec::core::metadata::location_tuple_from()","rspec::core::formatters::htmlprinter#make_example_group_header_red()","rspec::core::formatters::htmlprinter#make_example_group_header_yellow()","rspec::core::formatters::htmlprinter#make_header_red()","rspec::core::formatters::htmlprinter#make_header_yellow()","rspec::core::pending::mark_fixed!()","rspec::core::pending::mark_pending!()","rspec::core::pending::mark_skipped!()","rspec::core::hooks::hookcollections#matching_hooks_for()","rspec::core::examplestatusmerger#merge()","rspec::core::examplestatusmerger::merge()","rspec::core::set#merge()","rspec::core::formatters::basetextformatter#message()","rspec::core::formatters::documentationformatter#message()","rspec::core::formatters::failurelistformatter#message()","rspec::core::formatters::fallbackmessageformatter#message()","rspec::core::formatters::jsonformatter#message()","rspec::core::multipleexceptionerror#message()","rspec::core::reporter#message()","rspec::core::formatters::exceptionpresenter#message_lines()","rspec::core::notifications::failedexamplenotification#message_lines()","rspec::core::anonymousexamplegroup::metadata()","rspec::core::examplegroup::metadata()","rspec::core::outputwrapper#method_missing()","rspec::core::configuration#mock_framework()","rspec::core::configuration#mock_framework=()","rspec::core::configuration#mock_with()","rspec::core::formatters::htmlprinter#move_progress()","rspec::core::bisect::forkrunner::name()","rspec::core::bisect::shellrunner::name()","rspec::core::backtraceformatter::new()","rspec::core::bisect::channel::new()","rspec::core::bisect::coordinator::new()","rspec::core::bisect::exampleminimizer::new()","rspec::core::bisect::forkrunner::new()","rspec::core::bisect::forkrunner::rundispatcher::new()","rspec::core::bisect::notifier::new()","rspec::core::bisect::shellcommand::new()","rspec::core::bisect::shellrunner::new()","rspec::core::configuration::new()","rspec::core::configuration::deprecationreporterbuffer::new()","rspec::core::configurationoptions::new()","rspec::core::drboptions::new()","rspec::core::drbrunner::new()","rspec::core::didyoumean::new()","rspec::core::example::new()","rspec::core::example::procsy::new()","rspec::core::examplegroup::new()","rspec::core::examplestatusdumper::new()","rspec::core::examplestatusmerger::new()","rspec::core::examplestatusparser::new()","rspec::core::examplestatuspersister::new()","rspec::core::filtermanager::new()","rspec::core::filterrules::new()","rspec::core::filterrules::new()","rspec::core::filterableitemrepository::queryoptimized::new()","rspec::core::filterableitemrepository::updateoptimized::new()","rspec::core::formatters::basebisectformatter::new()","rspec::core::formatters::baseformatter::new()","rspec::core::formatters::bisectdrbformatter::new()","rspec::core::formatters::bisectprogressformatter::new()","rspec::core::formatters::deprecationformatter::new()","rspec::core::formatters::deprecationformatter::delayedprinter::new()","rspec::core::formatters::deprecationformatter::filestream::new()","rspec::core::formatters::deprecationformatter::immediateprinter::new()","rspec::core::formatters::documentationformatter::new()","rspec::core::formatters::exceptionpresenter::new()","rspec::core::formatters::exceptionpresenter::factory::new()","rspec::core::formatters::exceptionpresenter::factory::commonbacktracetruncater::new()","rspec::core::formatters::fallbackmessageformatter::new()","rspec::core::formatters::htmlformatter::new()","rspec::core::formatters::htmlprinter::new()","rspec::core::formatters::jsonformatter::new()","rspec::core::formatters::loader::new()","rspec::core::formatters::profileformatter::new()","rspec::core::formatters::snippetextractor::new()","rspec::core::formatters::syntaxhighlighter::new()","rspec::core::hooks::hookcollections::new()","rspec::core::legacyexamplegrouphash::new()","rspec::core::memoizedhelpers::new()","rspec::core::memoizedhelpers::nonthreadsafememoized::new()","rspec::core::memoizedhelpers::threadsafememoized::new()","rspec::core::metadata::hashpopulator::new()","rspec::core::multipleexceptionerror::new()","rspec::core::notifications::examplesnotification::new()","rspec::core::notifications::failedexamplenotification::new()","rspec::core::notifications::profilenotification::new()","rspec::core::ordering::configurationmanager::new()","rspec::core::ordering::custom::new()","rspec::core::ordering::random::new()","rspec::core::ordering::registry::new()","rspec::core::outputwrapper::new()","rspec::core::parser::new()","rspec::core::pending::skipdeclaredinexample::new()","rspec::core::profiler::new()","rspec::core::projectinitializer::new()","rspec::core::raketask::new()","rspec::core::reporter::new()","rspec::core::runner::new()","rspec::core::set::new()","rspec::core::sharedexamplegroupinclusionstackframe::new()","rspec::core::sharedexamplegroupmodule::new()","rspec::core::suitehookcontext::new()","rspec::core::world::new()","rspec::core::examplegroup::next_runnable_index_for()","rspec::core::world::null::non_example_failure()","rspec::core::world::null::non_example_failure=()","rspec::core::notifications::examplesnotification#notifications()","rspec::core::reporter#notify()","rspec::core::reporter#notify_non_example_exception()","rspec::core::formatters::bisectdrbformatter#notify_results()","rspec::core::world#num_example_groups_defined_in()","rspec::core::configuration#on_example_group_definition()","rspec::core::configuration#on_example_group_definition_callbacks()","rspec::core::configuration#only_failures_but_not_configured?()","rspec::core::drboptions#options()","rspec::core::ordering::custom#order()","rspec::core::ordering::identity#order()","rspec::core::ordering::random#order()","rspec::core::ordering::configurationmanager#order=()","rspec::core::world#ordered_example_groups()","rspec::core::examplegroup::ordering_strategy()","rspec::core::formatters::helpers::organize_ids()","rspec::core::bisect::shellcommand#original_locations()","rspec::core::bisect::forkrunner#original_results()","rspec::core::bisect::shellrunner#original_results()","rspec::core::configuration#output_stream=()","rspec::core::examplegroup::parent_groups()","rspec::core::examplestatusparser::parse()","rspec::core::examplestatusparser#parse()","rspec::core::parser#parse()","rspec::core::parser::parse()","rspec::core::example::parse_id()","rspec::core::path_to_executable()","rspec::core::configuration#pattern=()","rspec::core::pending#pending()","rspec::core::notifications::summarynotification#pending_count()","rspec::core::notifications::examplesnotification#pending_examples()","rspec::core::notifications::examplesnotification#pending_notifications()","rspec::core::notifications::profilenotification#percentage()","rspec::core::runner::perform_at_exit()","rspec::core::examplestatuspersister::persist()","rspec::core::examplestatuspersister#persist()","rspec::core::configuration::deprecationreporterbuffer#play_onto()","rspec::core::formatters::helpers::pluralize()","rspec::core::metadata::hashpopulator#populate()","rspec::core::formatters::htmlsnippetextractor#post_process()","rspec::core::world#preceding_declaration_line()","rspec::core::formatters::loader#prepare_default()","rspec::core::reporter#prepare_default()","rspec::core::world#prepare_example_filtering()","rspec::core::configuration#prepend()","rspec::core::filterableitemrepository::queryoptimized#prepend()","rspec::core::filterableitemrepository::updateoptimized#prepend()","rspec::core::configuration#prepend_after()","rspec::core::hooks#prepend_after()","rspec::core::configuration#prepend_before()","rspec::core::hooks#prepend_before()","rspec::core::formatters::deprecationformatter::delayedprinter#print_deferred_deprecation_warnings()","rspec::core::formatters::deprecationformatter::delayedprinter#print_deprecation_message()","rspec::core::formatters::deprecationformatter::immediateprinter#print_deprecation_message()","rspec::core::formatters::htmlprinter#print_example_failed()","rspec::core::formatters::htmlprinter#print_example_group_end()","rspec::core::formatters::htmlprinter#print_example_group_start()","rspec::core::formatters::htmlprinter#print_example_passed()","rspec::core::formatters::htmlprinter#print_example_pending()","rspec::core::formatters::htmlprinter#print_html_start()","rspec::core::formatters::htmlprinter#print_summary()","rspec::core::formatters::deprecationformatter#printer()","rspec::core::hooks::hookcollections#processable_hooks_for()","rspec::core::configuration#profile_examples()","rspec::core::filtermanager#prune()","rspec::core::bisect::notifier#publish()","rspec::core::reporter#publish()","rspec::core::formatters::deprecationformatter::filestream#puts()","rspec::core::formatters::deprecationformatter::raiseerrorstream#puts()","rspec::core::shellescape#quote()","rspec::core::configuration#raise_errors_for_deprecations!()","rspec::core::configuration#raise_on_warning=()","rspec::core::bisect::channel#receive()","rspec::core::sharedcontext::record()","rspec::core::world#record()","rspec::core::example::executionresult#record_finished()","rspec::core::formatters::register()","rspec::core::hooks::hookcollections#register()","rspec::core::ordering::registry#register()","rspec::core::hooks::hookcollections#register_global_singleton_context_hooks()","rspec::core::hooks::hookcollections#register_globals()","rspec::core::reporter#register_listener()","rspec::core::ordering::configurationmanager#register_ordering()","rspec::core::world#registered_example_group_files()","rspec::core::world::null::registered_example_group_files()","rspec::core::reporter#registered_listeners()","rspec::core::metadata::relative_path()","rspec::core::metadata::relative_path_regex()","rspec::examplegroups::remove_all_constants()","rspec::core::examplegroup::remove_example()","rspec::core::dsl::remove_globally!()","rspec::core::sharedexamplegroup::topleveldsl::remove_globally!()","rspec::core::reporter#report()","rspec::core::world#report_filter_message()","rspec::core::configuration#reporter()","rspec::core::world#reporter()","rspec::core::bisect::exampleminimizer#repro_command_for_currently_needed_ids()","rspec::core::bisect::shellcommand#repro_command_from()","rspec::core::configuration#requires=()","rspec::core::example#rerun_argument()","rspec::reset()","rspec::core::configuration#reset()","rspec::core::world#reset()","rspec::core::configuration#reset_filters()","rspec::core::examplegroup::reset_memoized()","rspec::core::configuration#reset_reporter()","rspec::core::outputwrapper#respond_to?()","rspec::core::rubyproject::root()","rspec::core::bisect::forkrunner#run()","rspec::core::bisect::server::run()","rspec::core::bisect::shellrunner#run()","rspec::core::drbrunner#run()","rspec::core::example#run()","rspec::core::example::procsy#run()","rspec::core::examplegroup::run()","rspec::core::hooks::aftercontexthook#run()","rspec::core::hooks::afterhook#run()","rspec::core::hooks::beforehook#run()","rspec::core::hooks::hookcollections#run()","rspec::core::projectinitializer#run()","rspec::core::runner#run()","rspec::core::runner::run()","rspec::core::examplegroup::run_after_context_hooks()","rspec::core::examplegroup::run_before_context_hooks()","rspec::core::examplegroup::run_examples()","rspec::core::hooks::hookcollections#run_owned_hooks_for()","rspec::core::runner#run_specs()","rspec::core::raketask#run_task()","rspec::core::runner::running_in_drb?()","rspec::core::sandbox::sandboxed()","rspec::core::formatters::basetextformatter#seed()","rspec::core::formatters::jsonformatter#seed()","rspec::core::ordering::configurationmanager#seed=()","rspec::core::notifications::seednotification#seed_used?()","rspec::core::ordering::configurationmanager#seed_used?()","rspec::core::bisect::channel#send()","rspec::core::example#set_aggregate_failures_exception()","rspec::core::example#set_exception()","rspec::core::suitehookcontext#set_exception()","rspec::core::examplegroup::set_it_up()","rspec::core::examplegroup::set_ivars()","rspec::core::runner#setup()","rspec::core::formatters::loader#setup_default()","rspec::core::mockingadapters::flexmock#setup_mocks_for_rspec()","rspec::core::mockingadapters::mocha#setup_mocks_for_rspec()","rspec::core::mockingadapters::null#setup_mocks_for_rspec()","rspec::core::mockingadapters::rr#setup_mocks_for_rspec()","rspec::core::mockingadapters::rspec#setup_mocks_for_rspec()","rspec::core::sharedexamplegroup#shared_context()","rspec::core::configuration#shared_context_metadata_behavior=()","rspec::core::sharedexamplegroupinclusionstackframe::shared_example_group_inclusions()","rspec::core::world#shared_example_group_registry()","rspec::core::sharedexamplegroup#shared_examples()","rspec::core::sharedexamplegroup::topleveldsl#shared_examples()","rspec::core::sharedexamplegroup#shared_examples_for()","rspec::core::shellescape#shell_allows_unquoted_ids?()","rspec::core::memoizedhelpers#should()","rspec::core::memoizedhelpers#should_not()","rspec::core::bisect::forkrunner#shutdown()","rspec::core::metadatafilter::silence_metadata_example_group_deprecations()","rspec::core::examplegroup#singleton_class()","rspec::core::pending#skip()","rspec::core::example#skip_with_exception()","rspec::core::notifications::profilenotification#slow_duration()","rspec::core::notifications::profilenotification#slowest_examples()","rspec::core::notifications::profilenotification#slowest_groups()","rspec::core::formatters::htmlsnippetextractor#snippet()","rspec::core::formatters::htmlsnippetextractor#snippet_for()","rspec::core::formatters::snippetextractor::source_from_file()","rspec::core::world#source_from_file()","rspec::core::configuration#spec_files_with_failures()","rspec::core::bisect::shellcommand#spec_opts_without_bisect()","rspec::core::inclusionrules#split_file_scoped_rules()","rspec::core::inclusionrules#standalone?()","rspec::core::bisect::forkrunner::start()","rspec::core::bisect::server#start()","rspec::core::bisect::shellrunner::start()","rspec::core::formatters::baseformatter#start()","rspec::core::formatters::htmlformatter#start()","rspec::core::reporter#start()","rspec::core::formatters::basebisectformatter#start_dump()","rspec::core::formatters::htmlformatter#start_dump()","rspec::core::formatters::progressformatter#start_dump()","rspec::core::formatters::deprecationformatter::delayedprinter#stash_deprecation_message()","rspec::core::bisect::server#stop()","rspec::core::formatters::jsonformatter#stop()","rspec::core::reporter#stop()","rspec::core::examplegroup::store_before_context_ivars()","rspec::core::examplegroup::subclass()","rspec::core::memoizedhelpers#subject()","rspec::core::memoizedhelpers::classmethods#subject()","rspec::core::memoizedhelpers::classmethods#subject!()","rspec::core::formatters::deprecationformatter::filestream#summarize()","rspec::core::formatters::deprecationformatter::raiseerrorstream#summarize()","rspec::core::multipleexceptionerror#summary()","rspec::core::examplegroup::superclass_before_context_ivars()","rspec::core::examplegroup::superclass_metadata()","rspec::core::world#syntax_highlighter()","rspec::core::mockingadapters::flexmock#teardown_mocks_for_rspec()","rspec::core::mockingadapters::mocha#teardown_mocks_for_rspec()","rspec::core::mockingadapters::null#teardown_mocks_for_rspec()","rspec::core::mockingadapters::rr#teardown_mocks_for_rspec()","rspec::core::mockingadapters::rspec#teardown_mocks_for_rspec()","rspec::core::hashimitatable#to_h()","rspec::core::legacyexamplegrouphash#to_h()","rspec::core::example::procsy#to_proc()","rspec::core::example#to_s()","rspec::core::sharedexamplegroupmodule#to_s()","rspec::core::examplegroup::top_level?()","rspec::core::examplegroup::top_level_description()","rspec::core::notifications::summarynotification#totals_line()","rspec::core::runner::trap_interrupt()","rspec::core::world#traverse_example_group_trees_until()","rspec::core::world::null::traverse_example_group_trees_until()","rspec::core::examplegroup::traverse_tree_until()","rspec::core::configuration#treat_symbols_as_metadata_keys_with_true_values=()","rspec::core::formatters::snippetextractor#unclosed_tokens_in_line_range()","rspec::core::example#update_inherited_metadata()","rspec::core::examplegroup::update_inherited_metadata()","rspec::core::filterrules#use_only()","rspec::core::filterrules#use_only()","rspec::core::ordering::random#used?()","rspec::core::ordering::registry#used_random_seed?()","rspec::core::mockingadapters::flexmock#verify_mocks_for_rspec()","rspec::core::mockingadapters::mocha#verify_mocks_for_rspec()","rspec::core::mockingadapters::null#verify_mocks_for_rspec()","rspec::core::mockingadapters::rr#verify_mocks_for_rspec()","rspec::core::mockingadapters::rspec#verify_mocks_for_rspec()","rspec::core::warnings#warn_deprecation()","rspec::core::warnings#warn_with()","rspec::core::configuration#warnings=()","rspec::core::configuration#warnings?()","rspec::core::configuration#when_first_matching_example_defined()","rspec::core::raketask#with_clean_environment()","rspec::core::raketask#with_clean_environment=()","rspec::core::sharedexamplegroupinclusionstackframe::with_frame()","rspec::core::examplegroup::with_replaced_metadata()","rspec::core::configuration#with_suite_hooks()","rspec::core::formatters::exceptionpresenter::factory::commonbacktracetruncater#with_truncated_backtrace()","rspec::world()","rspec::core::example::procsy#wrap()","rspec::core::formatters::consolecodes#wrap()","rspec::core::notifications::nullcolorizer#wrap()"],"info":[["Object","","Object.html","",""],["RSpec","","RSpec.html","","<p>Namespace for all core RSpec code.\n<p>This is borrowed (slightly modified) from Scott Taylor&#39;s project_path …\n"],["RSpec::Core","","RSpec/Core.html","","<p>Namespace for the rspec-core code.\n"],["RSpec::Core::AnonymousExampleGroup","","RSpec/Core/AnonymousExampleGroup.html","","<p>@private Unnamed example group used by `SuiteHookContext`.\n"],["RSpec::Core::BacktraceFormatter","","RSpec/Core/BacktraceFormatter.html","","<p>@private\n"],["RSpec::Core::Bisect","","RSpec/Core/Bisect.html","","<p>@private\n"],["RSpec::Core::Bisect::BisectFailedError","","RSpec/Core/Bisect/BisectFailedError.html","","<p>@private\n"],["RSpec::Core::Bisect::Channel","","RSpec/Core/Bisect/Channel.html","","<p>Wraps a pipe to support sending objects between a child and parent process. @private\n"],["RSpec::Core::Bisect::Coordinator","","RSpec/Core/Bisect/Coordinator.html","","<p>The main entry point into the bisect logic. Coordinates among:\n\n<pre>- Bisect::ShellCommand: Generates shell ...</pre>\n"],["RSpec::Core::Bisect::ExampleMinimizer","","RSpec/Core/Bisect/ExampleMinimizer.html","","<p>@private Contains the core bisect logic. Searches for examples we can ignore by repeatedly running different …\n"],["RSpec::Core::Bisect::ForkRunner","","RSpec/Core/Bisect/ForkRunner.html","","<p>A Bisect runner that runs requested subsets of the suite by forking sub-processes. The master process …\n"],["RSpec::Core::Bisect::ForkRunner::CaptureFormatter","","RSpec/Core/Bisect/ForkRunner/CaptureFormatter.html","",""],["RSpec::Core::Bisect::ForkRunner::RunDispatcher","","RSpec/Core/Bisect/ForkRunner/RunDispatcher.html","","<p>@private\n"],["RSpec::Core::Bisect::Notifier","","RSpec/Core/Bisect/Notifier.html","","<p>Wraps a `formatter` providing a simple means to notify it in place of an `RSpec::Core::Reporter`, without …\n"],["RSpec::Core::Bisect::Server","","RSpec/Core/Bisect/Server.html","","<p>@private A DRb server that receives run results from a separate RSpec process started by the bisect process. …\n"],["RSpec::Core::Bisect::ShellCommand","","RSpec/Core/Bisect/ShellCommand.html","","<p>Provides an API to generate shell commands to run the suite for a set of locations, using the given bisect …\n"],["RSpec::Core::Bisect::ShellRunner","","RSpec/Core/Bisect/ShellRunner.html","","<p>Provides an API to run the suite for a set of locations, using the given bisect server to capture the …\n"],["RSpec::Core::Configuration","","RSpec/Core/Configuration.html","","<p>Stores runtime configuration information.\n<p>Configuration options are loaded from multiple files and joined …\n"],["RSpec::Core::Configuration::DeprecationReporterBuffer","","RSpec/Core/Configuration/DeprecationReporterBuffer.html","","<p>@private\n<p>This buffer is used to capture all messages sent to the reporter during reporter initialization. …\n"],["RSpec::Core::Configuration::ExposeCurrentExample","","RSpec/Core/Configuration/ExposeCurrentExample.html","","<p>@private\n"],["RSpec::Core::Configuration::MustBeConfiguredBeforeExampleGroupsError","","RSpec/Core/Configuration/MustBeConfiguredBeforeExampleGroupsError.html","","<p>@private\n"],["RSpec::Core::ConfigurationOptions","","RSpec/Core/ConfigurationOptions.html","","<p>Responsible for utilizing externally provided configuration options, whether via the command line, `.rspec`, …\n"],["RSpec::Core::DRbOptions","","RSpec/Core/DRbOptions.html","","<p>@private\n"],["RSpec::Core::DRbRunner","","RSpec/Core/DRbRunner.html","","<p>@private\n"],["RSpec::Core::DSL","","RSpec/Core/DSL.html","","<p>DSL defines methods to group examples, most notably `describe`, and exposes them as class methods of …\n"],["RSpec::Core::DSL::RSpec","","RSpec/Core/DSL/RSpec.html","",""],["RSpec::Core::DidYouMean","","RSpec/Core/DidYouMean.html","","<p>@private Wrapper around Ruby&#39;s `DidYouMean::SpellChecker` when available to provide file name suggestions. …\n"],["RSpec::Core::Example","","RSpec/Core/Example.html","","<p>Wrapper for an instance of a subclass of {ExampleGroup}. An instance of `RSpec::Core::Example` is returned …\n"],["RSpec::Core::Example::ExecutionResult","","RSpec/Core/Example/ExecutionResult.html","","<p>Represents the result of executing an example. Behaves like a hash for backwards compatibility.\n"],["RSpec::Core::Example::Procsy","","RSpec/Core/Example/Procsy.html","","<p>Wraps both a `Proc` and an {Example} for use in {Hooks#around around} hooks. In around hooks we need …\n"],["RSpec::Core::ExampleGroup","","RSpec/Core/ExampleGroup.html","","<p>ExampleGroup and {Example} are the main structural elements of rspec-core. Consider this example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RSpec</span>.<span class=\"ruby-identifier\">describe</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["RSpec::Core::ExampleStatusDumper","","RSpec/Core/ExampleStatusDumper.html","","<p>Dumps a list of hashes in a pretty, human readable format for later parsing. The hashes are expected …\n"],["RSpec::Core::ExampleStatusMerger","","RSpec/Core/ExampleStatusMerger.html","","<p>Merges together a list of example statuses from this run and a list from previous runs (presumably loaded …\n"],["RSpec::Core::ExampleStatusParser","","RSpec/Core/ExampleStatusParser.html","","<p>Parses a string that has been previously dumped by ExampleStatusDumper. Note that this parser is a bit …\n"],["RSpec::Core::ExampleStatusPersister","","RSpec/Core/ExampleStatusPersister.html","","<p>Persists example ids and their statuses so that we can filter to just the ones that failed the last time …\n"],["RSpec::Core::ExclusionRules","","RSpec/Core/FilterRules.html","","<p>@private\n"],["RSpec::Core::FilterManager","","RSpec/Core/FilterManager.html","","<p>@private\n"],["RSpec::Core::FilterRules","","RSpec/Core/FilterRules.html","","<p>@private\n"],["RSpec::Core::FilterableItemRepository","","RSpec/Core/FilterableItemRepository.html","","<p>Tracks a collection of filterable items (e.g. modules, hooks, etc) and provides an optimized API to get …\n"],["RSpec::Core::FilterableItemRepository::QueryOptimized","","RSpec/Core/FilterableItemRepository/QueryOptimized.html","","<p>This implementation is much more complex, and is optimized for rare (or hopefully no) updates once the …\n"],["RSpec::Core::FilterableItemRepository::UpdateOptimized","","RSpec/Core/FilterableItemRepository/UpdateOptimized.html","","<p>This implementation is simple, and is optimized for frequent updates but rare queries. `append` and `prepend` …\n"],["RSpec::Core::FlatMap","","RSpec/Core/FlatMap.html","","<p>@private\n"],["RSpec::Core::Formatters","","RSpec/Core/Formatters.html","","<p>## Built-in Formatters\n<p>progress (default) - Prints dots for passing examples, `F` for failures, `*`\n\n<pre>for ...</pre>\n"],["RSpec::Core::Formatters::BaseBisectFormatter","","RSpec/Core/Formatters/BaseBisectFormatter.html","","<p>Contains common logic for formatters used by `–bisect` to communicate results back to the bisect runner. …\n"],["RSpec::Core::Formatters::BaseFormatter","","RSpec/Core/Formatters/BaseFormatter.html","","<p>RSpec&#39;s built-in formatters are all subclasses of RSpec::Core::Formatters::BaseFormatter.\n<p>@see RSpec::Core::Formatters::BaseTextFormatter …\n"],["RSpec::Core::Formatters::BaseTextFormatter","","RSpec/Core/Formatters/BaseTextFormatter.html","","<p>Base for all of RSpec&#39;s built-in formatters. See RSpec::Core::Formatters::BaseFormatter to learn …\n"],["RSpec::Core::Formatters::BisectDRbFormatter","","RSpec/Core/Formatters/BisectDRbFormatter.html","","<p>Used by `–bisect`. When it shells out and runs a portion of the suite, it uses this formatter as a means …\n"],["RSpec::Core::Formatters::BisectDebugFormatter","","RSpec/Core/Formatters/BisectDebugFormatter.html","","<p>@private Produces detailed debug output while bisecting. Used when bisect is performed with `–bisect=verbose`. …\n"],["RSpec::Core::Formatters::BisectProgressFormatter","","RSpec/Core/Formatters/BisectProgressFormatter.html","","<p>@private Produces progress output while bisecting.\n"],["RSpec::Core::Formatters::ConsoleCodes","","RSpec/Core/Formatters/ConsoleCodes.html","","<p>ConsoleCodes provides helpers for formatting console output with ANSI codes, e.g. color&#39;s and bold. …\n"],["RSpec::Core::Formatters::DeprecationFormatter","","RSpec/Core/Formatters/DeprecationFormatter.html","","<p>@private\n"],["RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter","","RSpec/Core/Formatters/DeprecationFormatter/DelayedPrinter.html","","<p>@private\n"],["RSpec::Core::Formatters::DeprecationFormatter::FileStream","","RSpec/Core/Formatters/DeprecationFormatter/FileStream.html","","<p>@private Wraps a File object and provides file-specific operations.\n"],["RSpec::Core::Formatters::DeprecationFormatter::ImmediatePrinter","","RSpec/Core/Formatters/DeprecationFormatter/ImmediatePrinter.html","","<p>@private\n"],["RSpec::Core::Formatters::DeprecationFormatter::RaiseErrorStream","","RSpec/Core/Formatters/DeprecationFormatter/RaiseErrorStream.html","","<p>@private Not really a stream, but is usable in place of one.\n"],["RSpec::Core::Formatters::DocumentationFormatter","","RSpec/Core/Formatters/DocumentationFormatter.html","","<p>@private\n"],["RSpec::Core::Formatters::ExceptionPresenter","","RSpec/Core/Formatters/ExceptionPresenter.html","","<p>@private\n"],["RSpec::Core::Formatters::ExceptionPresenter::Factory","","RSpec/Core/Formatters/ExceptionPresenter/Factory.html","","<p>@private Configuring the `ExceptionPresenter` with the right set of options to handle pending vs failed …\n"],["RSpec::Core::Formatters::ExceptionPresenter::Factory::CommonBacktraceTruncater","","RSpec/Core/Formatters/ExceptionPresenter/Factory/CommonBacktraceTruncater.html","","<p>@private\n"],["RSpec::Core::Formatters::ExceptionPresenter::Factory::EmptyBacktraceFormatter","","RSpec/Core/Formatters/ExceptionPresenter/Factory/EmptyBacktraceFormatter.html","","<p>@private Used to prevent a confusing backtrace from showing up from the `aggregate_failures` block declared …\n"],["RSpec::Core::Formatters::FailureListFormatter","","RSpec/Core/Formatters/FailureListFormatter.html","","<p>@private\n"],["RSpec::Core::Formatters::FallbackMessageFormatter","","RSpec/Core/Formatters/FallbackMessageFormatter.html","","<p>@api private Formatter for providing message output as a fallback when no other profiler implements  …\n"],["RSpec::Core::Formatters::Helpers","","RSpec/Core/Formatters/Helpers.html","","<p>Formatters helpers.\n"],["RSpec::Core::Formatters::HtmlFormatter","","RSpec/Core/Formatters/HtmlFormatter.html","","<p>@private\n"],["RSpec::Core::Formatters::HtmlPrinter","","RSpec/Core/Formatters/HtmlPrinter.html","","<p>@private\n"],["RSpec::Core::Formatters::HtmlSnippetExtractor","","RSpec/Core/Formatters/HtmlSnippetExtractor.html","","<p>@api private\n<p>Extracts code snippets by looking at the backtrace of the passed error and applies synax …\n"],["RSpec::Core::Formatters::HtmlSnippetExtractor::CoderayConverter","","RSpec/Core/Formatters/HtmlSnippetExtractor/CoderayConverter.html","","<p>@private\n"],["RSpec::Core::Formatters::HtmlSnippetExtractor::NullConverter","","RSpec/Core/Formatters/HtmlSnippetExtractor/NullConverter.html","","<p>@private\n"],["RSpec::Core::Formatters::JsonFormatter","","RSpec/Core/Formatters/JsonFormatter.html","","<p>@private\n"],["RSpec::Core::Formatters::Loader","","RSpec/Core/Formatters/Loader.html","","<p>@api private\n<p>`RSpec::Core::Formatters::Loader` is an internal class for managing formatters used by a …\n"],["RSpec::Core::Formatters::ProfileFormatter","","RSpec/Core/Formatters/ProfileFormatter.html","","<p>@api private Formatter for providing profile output.\n"],["RSpec::Core::Formatters::ProgressFormatter","","RSpec/Core/Formatters/ProgressFormatter.html","","<p>@private\n"],["RSpec::Core::Formatters::Protocol","","RSpec/Core/Formatters/Protocol.html","","<p>This class isn&#39;t loaded at runtime but serves to document all of the notifications implemented as …\n"],["RSpec::Core::Formatters::SnippetExtractor","","RSpec/Core/Formatters/SnippetExtractor.html","","<p>@private\n"],["RSpec::Core::Formatters::SyntaxHighlighter","","RSpec/Core/Formatters/SyntaxHighlighter.html","","<p>@private Provides terminal syntax highlighting of code snippets when coderay is available.\n"],["RSpec::Core::Formatters::SyntaxHighlighter::CodeRayImplementation","","RSpec/Core/Formatters/SyntaxHighlighter/CodeRayImplementation.html","","<p>@private\n"],["RSpec::Core::Formatters::SyntaxHighlighter::NoSyntaxHighlightingImplementation","","RSpec/Core/Formatters/SyntaxHighlighter/NoSyntaxHighlightingImplementation.html","","<p>@private\n"],["RSpec::Core::Formatters::SyntaxHighlighter::WindowsImplementation","","RSpec/Core/Formatters/SyntaxHighlighter/NoSyntaxHighlightingImplementation.html","","<p>@private\n"],["RSpec::Core::HashImitatable","","RSpec/Core/HashImitatable.html","","<p>Mixin that makes the including class imitate a hash for backwards compatibility. The including class …\n"],["RSpec::Core::HashImitatable::ClassMethods","","RSpec/Core/HashImitatable/ClassMethods.html","","<p>@private\n"],["RSpec::Core::Hooks","","RSpec/Core/Hooks.html","","<p>Provides `before`, `after` and `around` hooks as a means of supporting common setup and teardown. This …\n"],["RSpec::Core::Hooks::AfterContextHook","","RSpec/Core/Hooks/AfterContextHook.html","","<p>@private\n"],["RSpec::Core::Hooks::AfterHook","","RSpec/Core/Hooks/AfterHook.html","","<p>@private\n"],["RSpec::Core::Hooks::AroundHook","","RSpec/Core/Hooks/AroundHook.html","","<p>@private\n"],["RSpec::Core::Hooks::BeforeHook","","RSpec/Core/Hooks/BeforeHook.html","","<p>@private\n"],["RSpec::Core::Hooks::HookCollections","","RSpec/Core/Hooks/HookCollections.html","","<p>@private\n<p>This provides the primary API used by other parts of rspec-core. By hiding all implementation …\n"],["RSpec::Core::InclusionRules","","RSpec/Core/InclusionRules.html","","<p>@private\n"],["RSpec::Core::Invocations","","RSpec/Core/Invocations.html","","<p>@private\n"],["RSpec::Core::Invocations::Bisect","","RSpec/Core/Invocations/Bisect.html","","<p>@private\n"],["RSpec::Core::Invocations::DRbWithFallback","","RSpec/Core/Invocations/DRbWithFallback.html","","<p>@private\n"],["RSpec::Core::Invocations::InitializeProject","","RSpec/Core/Invocations/InitializeProject.html","","<p>@private\n"],["RSpec::Core::Invocations::PrintVersion","","RSpec/Core/Invocations/PrintVersion.html","","<p>@private\n"],["RSpec::Core::LegacyExampleGroupHash","","RSpec/Core/LegacyExampleGroupHash.html","","<p>@private Together with the example group metadata hash default block, provides backwards compatibility …\n"],["RSpec::Core::MemoizedHelpers","","RSpec/Core/MemoizedHelpers.html","","<p>This module is included in {ExampleGroup}, making the methods available to be called from within example …\n"],["RSpec::Core::MemoizedHelpers::ClassMethods","","RSpec/Core/MemoizedHelpers/ClassMethods.html","","<p>This module is extended onto {ExampleGroup}, making the methods available to be called from within example …\n"],["RSpec::Core::MemoizedHelpers::ContextHookMemoized","","RSpec/Core/MemoizedHelpers/ContextHookMemoized.html","","<p>Used internally to customize the behavior of the memoized hash when used in a `before(:context)` hook. …\n"],["RSpec::Core::MemoizedHelpers::ContextHookMemoized::After","","RSpec/Core/MemoizedHelpers/ContextHookMemoized/After.html","","<p>@private\n"],["RSpec::Core::MemoizedHelpers::ContextHookMemoized::Before","","RSpec/Core/MemoizedHelpers/ContextHookMemoized/Before.html","","<p>@private\n"],["RSpec::Core::MemoizedHelpers::NonThreadSafeMemoized","","RSpec/Core/MemoizedHelpers/NonThreadSafeMemoized.html","","<p>@private\n"],["RSpec::Core::MemoizedHelpers::ThreadsafeMemoized","","RSpec/Core/MemoizedHelpers/ThreadsafeMemoized.html","","<p>@private\n"],["RSpec::Core::Metadata","","RSpec/Core/Metadata.html","","<p>Each ExampleGroup class and Example instance owns an instance of Metadata, which is Hash extended to …\n"],["RSpec::Core::Metadata::ExampleGroupHash","","RSpec/Core/Metadata/ExampleGroupHash.html","","<p>@private\n"],["RSpec::Core::Metadata::ExampleHash","","RSpec/Core/Metadata/ExampleHash.html","","<p>@private\n"],["RSpec::Core::Metadata::HashPopulator","","RSpec/Core/Metadata/HashPopulator.html","","<p>@private Used internally to populate metadata hashes with computed keys managed by RSpec.\n"],["RSpec::Core::MetadataFilter","","RSpec/Core/MetadataFilter.html","","<p>Contains metadata filtering logic. This has been extracted from the metadata classes because it operates …\n"],["RSpec::Core::MinitestAssertionsAdapter","","RSpec/Core/MinitestAssertionsAdapter.html","","<p>@private\n"],["RSpec::Core::MockingAdapters","","RSpec/Core/MockingAdapters.html","","<p>@private\n"],["RSpec::Core::MockingAdapters::Flexmock","","RSpec/Core/MockingAdapters/Flexmock.html","","<p>@private\n"],["RSpec::Core::MockingAdapters::Mocha","","RSpec/Core/MockingAdapters/Mocha.html","","<p>@private\n"],["RSpec::Core::MockingAdapters::Null","","RSpec/Core/MockingAdapters/Null.html","","<p>@private\n"],["RSpec::Core::MockingAdapters::RR","","RSpec/Core/MockingAdapters/RR.html","","<p>@private\n"],["RSpec::Core::MockingAdapters::RSpec","","RSpec/Core/MockingAdapters/RSpec.html","","<p>@private\n"],["RSpec::Core::MultipleExceptionError","","RSpec/Core/MultipleExceptionError.html","","<p>Provides a single exception instance that provides access to multiple sub-exceptions. This is used in …\n"],["RSpec::Core::MultipleExceptionError::InterfaceTag","","RSpec/Core/MultipleExceptionError/InterfaceTag.html","","<p>@private Used so there is a common module in the ancestor chain of this class and `RSpec::Expectations::MultipleExpectationsNotMetError`, …\n"],["RSpec::Core::Notifications","","RSpec/Core/Notifications.html","","<p>Notifications are value objects passed to formatters to provide them with information about a particular …\n"],["RSpec::Core::Notifications::CustomNotification","","RSpec/Core/Notifications/CustomNotification.html","","<p>`CustomNotification` is used when sending custom events to formatters / other registered listeners, it …\n"],["RSpec::Core::Notifications::DeprecationNotification","","RSpec/Core/Notifications/DeprecationNotification.html","",""],["RSpec::Core::Notifications::ExampleNotification","","RSpec/Core/Notifications/ExampleNotification.html","",""],["RSpec::Core::Notifications::ExamplesNotification","","RSpec/Core/Notifications/ExamplesNotification.html","","<p>The `ExamplesNotification` represents notifications sent by the reporter which contain information about …\n"],["RSpec::Core::Notifications::FailedExampleNotification","","RSpec/Core/Notifications/FailedExampleNotification.html","","<p>The `FailedExampleNotification` extends `ExampleNotification` with things useful for examples that have …\n"],["RSpec::Core::Notifications::NullColorizer","","RSpec/Core/Notifications/NullColorizer.html","","<p>@private\n"],["RSpec::Core::Notifications::NullNotification","","RSpec/Core/Notifications/NullNotification.html","","<p>`NullNotification` represents a placeholder value for notifications that currently require no information, …\n"],["RSpec::Core::Notifications::PendingExampleFailedAsExpectedNotification","","RSpec/Core/Notifications/PendingExampleFailedAsExpectedNotification.html","","<p>@deprecated Use {FailedExampleNotification} instead.\n"],["RSpec::Core::Notifications::PendingExampleFixedNotification","","RSpec/Core/Notifications/PendingExampleFixedNotification.html","","<p>@deprecated Use {FailedExampleNotification} instead.\n"],["RSpec::Core::Notifications::ProfileNotification","","RSpec/Core/Notifications/ProfileNotification.html","","<p>The `ProfileNotification` holds information about the results of running a test suite when profiling …\n"],["RSpec::Core::Notifications::SeedNotification","","RSpec/Core/Notifications/SeedNotification.html","",""],["RSpec::Core::Notifications::SkippedExampleNotification","","RSpec/Core/Notifications/SkippedExampleNotification.html","","<p>The `SkippedExampleNotification` extends `ExampleNotification` with things useful for specs that are …\n"],["RSpec::Core::Notifications::SummaryNotification","","RSpec/Core/Notifications/SummaryNotification.html","",""],["RSpec::Core::NullReporter","","RSpec/Core/NullReporter.html","","<p>@private # Used in place of a {Reporter} for situations where we don&#39;t want reporting output.\n"],["RSpec::Core::Ordering","","RSpec/Core/Ordering.html","","<p>@private\n"],["RSpec::Core::Ordering::ConfigurationManager","","RSpec/Core/Ordering/ConfigurationManager.html","","<p>@private Manages ordering configuration.\n<p>@note This is not intended to be used externally. Use\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">the</span> <span class=\"ruby-constant\">APIs</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["RSpec::Core::Ordering::Custom","","RSpec/Core/Ordering/Custom.html","","<p>@private Orders items based on a custom block.\n"],["RSpec::Core::Ordering::Identity","","RSpec/Core/Ordering/Identity.html","","<p>@private The default global ordering (defined order).\n"],["RSpec::Core::Ordering::Random","","RSpec/Core/Ordering/Random.html","","<p>@private Orders items randomly.\n"],["RSpec::Core::Ordering::Registry","","RSpec/Core/Ordering/Registry.html","","<p>@private Stores the different ordering strategies.\n"],["RSpec::Core::OutputWrapper","","RSpec/Core/OutputWrapper.html","","<p>@private\n"],["RSpec::Core::Parser","","RSpec/Core/Parser.html","","<p>@private\n"],["RSpec::Core::Pending","","RSpec/Core/Pending.html","","<p>Provides methods to mark examples as pending. These methods are available to be called from within any …\n"],["RSpec::Core::Pending::PendingExampleFixedError","","RSpec/Core/Pending/PendingExampleFixedError.html","",""],["RSpec::Core::Pending::SkipDeclaredInExample","","RSpec/Core/Pending/SkipDeclaredInExample.html","","<p>Raised in the middle of an example to indicate that it should be marked as skipped.\n"],["RSpec::Core::Profiler","","RSpec/Core/Profiler.html","","<p>@private\n"],["RSpec::Core::ProjectInitializer","","RSpec/Core/ProjectInitializer.html","","<p>@private Generates conventional files for an RSpec project.\n"],["RSpec::Core::RakeTask","","RSpec/Core/RakeTask.html","","<p>RSpec rake task\n<p>@see Rakefile\n"],["RSpec::Core::Reporter","","RSpec/Core/Reporter.html","","<p>A reporter will send notifications to listeners, usually formatters for the spec suite run.\n"],["RSpec::Core::RubyProject","","RSpec/Core/RubyProject.html","","<p>@private\n"],["RSpec::Core::Runner","","RSpec/Core/Runner.html","","<p>Provides the main entry point to run a suite of RSpec examples.\n"],["RSpec::Core::Sandbox","","RSpec/Core/Sandbox.html","","<p>A sandbox isolates the enclosed code into an environment that looks &#39;new&#39; meaning globally accessed …\n"],["RSpec::Core::Set","","RSpec/Core/Set.html","","<p>@private\n<p>We use this to replace `::Set` so we can have the advantage of constant time key lookups for …\n"],["RSpec::Core::SharedContext","","RSpec/Core/SharedContext.html","","<p>Exposes {ExampleGroup}-level methods to a module, so you can include that module in an {ExampleGroup}. …\n"],["RSpec::Core::SharedExampleGroup","","RSpec/Core/SharedExampleGroup.html","","<p>Shared example groups let you define common context and/or common examples that you wish to use in multiple …\n"],["RSpec::Core::SharedExampleGroup::Registry","","RSpec/Core/SharedExampleGroup/Registry.html","","<p>@private\n"],["RSpec::Core::SharedExampleGroup::TopLevelDSL","","RSpec/Core/SharedExampleGroup/TopLevelDSL.html","","<p>@api private\n<p>Shared examples top level DSL.\n"],["RSpec::Core::SharedExampleGroupInclusionStackFrame","","RSpec/Core/SharedExampleGroupInclusionStackFrame.html","","<p>Contains information about the inclusion site of a shared example group.\n"],["RSpec::Core::SharedExampleGroupModule","","RSpec/Core/SharedExampleGroupModule.html","","<p>Represents some functionality that is shared with multiple example groups. The functionality is defined …\n"],["RSpec::Core::ShellEscape","","RSpec/Core/ShellEscape.html","","<p>@private Deals with the fact that `shellwords` only works on POSIX systems.\n"],["RSpec::Core::SuiteHookContext","","RSpec/Core/SuiteHookContext.html","","<p>@private Provides an execution context for before/after :suite hooks.\n"],["RSpec::Core::TestUnitAssertionsAdapter","","RSpec/Core/TestUnitAssertionsAdapter.html","","<p>@private\n"],["RSpec::Core::Time","","RSpec/Core/Time.html","","<p>@private This avoids issues with reporting time caused by examples that change the value/meaning of  …\n"],["RSpec::Core::Version","","RSpec/Core/Version.html","","<p>Version information for RSpec Core.\n"],["RSpec::Core::Warnings","","RSpec/Core/Warnings.html","","<p>@private\n"],["RSpec::Core::World","","RSpec/Core/World.html","","<p>@api private\n<p>Internal container for global non-configuration data.\n"],["RSpec::Core::World::Null","","RSpec/Core/World/Null.html","","<p>@private Provides a null implementation for initial use by configuration.\n"],["RSpec::ExampleGroups","","RSpec/ExampleGroups.html","","<p>@private\n<p>Namespace for the example group subclasses generated by top-level `describe`.\n"],["<<","RSpec::Core::Set","RSpec/Core/Set.html#method-i-3C-3C","(key)",""],["[]","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-5B-5D","(key)",""],["[]","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-5B-5D","(key)",""],["[]","RSpec::Core::HashImitatable","RSpec/Core/HashImitatable.html#method-i-5B-5D","(key)",""],["[]=","RSpec::Core::HashImitatable","RSpec/Core/HashImitatable.html#method-i-5B-5D-3D","(key, value)",""],["__shared_context_recordings","RSpec::Core::SharedContext","RSpec/Core/SharedContext.html#method-i-__shared_context_recordings","()","<p>@private\n"],["_base_name_for","RSpec::ExampleGroups","RSpec/ExampleGroups.html#method-c-_base_name_for","(group)",""],["abort_with","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-abort_with","(msg, exit_status)","<p>@private\n"],["add","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-add","(updated)",""],["add","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-add","(updated)",""],["add","RSpec::Core::Formatters::Loader","RSpec/Core/Formatters/Loader.html#method-i-add","(formatter_to_use, *paths)","<p>@private\n"],["add","RSpec::Core::InclusionRules","RSpec/Core/InclusionRules.html#method-i-add","(*args)",""],["add","RSpec::Core::MultipleExceptionError::InterfaceTag","RSpec/Core/MultipleExceptionError/InterfaceTag.html#method-i-add","(exception)","<p>Appends the provided exception to the list. @param exception [Exception] Exception to append to the list. …\n"],["add","RSpec::Core::SharedExampleGroup::Registry","RSpec/Core/SharedExampleGroup/Registry.html#method-i-add","(context, name, *metadata_args, &block)",""],["add_dir_to_load_path","RSpec::Core::RubyProject","RSpec/Core/RubyProject.html#method-c-add_dir_to_load_path","(dir)",""],["add_example","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-add_example","(example)","<p>Adds an example to the example group\n"],["add_failure_exit_code","RSpec::Core::DRbOptions","RSpec/Core/DRbOptions.html#method-i-add_failure_exit_code","(argv)",""],["add_filter","RSpec::Core::DRbOptions","RSpec/Core/DRbOptions.html#method-i-add_filter","(argv, name, hash)",""],["add_formatter","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-add_formatter","(formatter, output=output_wrapper)","<p>@overload add_formatter(formatter) @overload add_formatter(formatter, output)\n<p>@param formatter [Class, …\n"],["add_formatters","RSpec::Core::DRbOptions","RSpec/Core/DRbOptions.html#method-i-add_formatters","(argv)",""],["add_full_description","RSpec::Core::DRbOptions","RSpec/Core/DRbOptions.html#method-i-add_full_description","(argv)",""],["add_ids","RSpec::Core::FilterManager","RSpec/Core/FilterManager.html#method-i-add_ids","(rerun_path, scoped_ids)",""],["add_libs","RSpec::Core::DRbOptions","RSpec/Core/DRbOptions.html#method-i-add_libs","(argv)",""],["add_location","RSpec::Core::FilterManager","RSpec/Core/FilterManager.html#method-i-add_location","(file_path, line_numbers)","<p>@api private\n<p>@param file_path [String] @param line_numbers [Array]\n"],["add_read_only_setting","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-c-add_read_only_setting","(name, opts={})","<p>@private\n<p>As `add_setting` but only add the reader.\n"],["add_requires","RSpec::Core::DRbOptions","RSpec/Core/DRbOptions.html#method-i-add_requires","(argv)",""],["add_setting","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-c-add_setting","(name, opts={})","<p>@private\n<p>Invoked by the `add_setting` instance method. Use that method on a `Configuration` instance rather …\n"],["add_setting","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-add_setting","(name, opts={})","<p>@overload add_setting(name) @overload add_setting(name, opts) @option opts [Symbol] :default\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Set</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">default</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["add_to_load_path","RSpec::Core::RubyProject","RSpec/Core/RubyProject.html#method-c-add_to_load_path","(*dirs)",""],["add_with_low_priority","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-add_with_low_priority","(updated)",""],["add_with_low_priority","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-add_with_low_priority","(updated)",""],["add_with_low_priority","RSpec::Core::InclusionRules","RSpec/Core/InclusionRules.html#method-i-add_with_low_priority","(*args)",""],["after","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-after","(scope=nil, *meta, &block)","<p>Defines a `after` hook. See {Hooks#after} for full docs.\n<p>This method differs from {Hooks#after} in only …\n"],["after","RSpec::Core::Hooks","RSpec/Core/Hooks.html#method-i-after","(*args, &block)","<p>@api public @overload after(&amp;block) @overload after(scope, &amp;block)\n\n<pre>@param scope [Symbol] `:example`, ...</pre>\n"],["alias_example_group_to","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-alias_example_group_to","(new_name, *args)","<p>Creates a method that defines an example group with the provided metadata. Can be used to define example …\n"],["alias_example_to","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-alias_example_to","(name, *args)","<p>Creates a method that delegates to `example` including the submitted `args`. Used internally to add variants …\n"],["alias_it_behaves_like_to","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-alias_it_behaves_like_to","(new_name, report_label='')","<p>Define an alias for it_should_behave_like that allows different language (like “it_has_behavior” …\n"],["alias_it_should_behave_like_to","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-alias_it_should_behave_like_to","(new_name, report_label='')",""],["all_example_groups","RSpec::Core::World","RSpec/Core/World.html#method-i-all_example_groups","()","<p>@private\n"],["all_example_groups","RSpec::Core::World::Null","RSpec/Core/World/Null.html#method-c-all_example_groups","()",""],["all_examples","RSpec::Core::World","RSpec/Core/World.html#method-i-all_examples","()","<p>@private\n"],["all_hooks_for","RSpec::Core::Hooks::HookCollections","RSpec/Core/Hooks/HookCollections.html#method-i-all_hooks_for","(position, scope)",""],["announce_exclusion_filter","RSpec::Core::World","RSpec/Core/World.html#method-i-announce_exclusion_filter","(announcements)","<p>@api private\n<p>Add exclusion filters to announcement message.\n"],["announce_filters","RSpec::Core::World","RSpec/Core/World.html#method-i-announce_filters","()","<p>@api private\n<p>Notify reporter of filters.\n"],["announce_inclusion_filter","RSpec::Core::World","RSpec/Core/World.html#method-i-announce_inclusion_filter","(announcements)","<p>@api private\n<p>Add inclusion filters to announcement message.\n"],["append","RSpec::Core::FilterableItemRepository::QueryOptimized","RSpec/Core/FilterableItemRepository/QueryOptimized.html#method-i-append","(item, metadata)",""],["append","RSpec::Core::FilterableItemRepository::UpdateOptimized","RSpec/Core/FilterableItemRepository/UpdateOptimized.html#method-i-append","(item, metadata)",""],["append_after","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-append_after","(scope=nil, *meta, &block)","<p>Adds `block` to the end of the list of `after` blocks in the same scope (`:example`, `:context`, or `:suite`), …\n"],["append_after","RSpec::Core::Hooks","RSpec/Core/Hooks.html#method-i-append_after","(*args, &block)","<p>Adds `block` to the back of the list of `after` blocks in the same scope (`:example`, `:context`, or …\n"],["append_before","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-append_before","(scope=nil, *meta, &block)",""],["append_before","RSpec::Core::Hooks","RSpec/Core/Hooks.html#method-i-append_before","(*args, &block)",""],["apply?","RSpec::Core::MetadataFilter","RSpec/Core/MetadataFilter.html#method-c-apply-3F","(predicate, filters, metadata)","<p>@private\n"],["apply_derived_metadata_to","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-apply_derived_metadata_to","(metadata)","<p>@private\n"],["around","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-around","(scope=nil, *meta, &block)","<p>Registers `block` as an `around` hook.\n<p>See {Hooks#around} for full `around` hook docs.\n"],["around","RSpec::Core::Hooks","RSpec/Core/Hooks.html#method-i-around","(*args, &block)","<p>@api public @overload around(&amp;block) @overload around(scope, &amp;block)\n\n<pre>@param scope [Symbol] `:example` ...</pre>\n"],["article","RSpec::Core::MemoizedHelpers::ContextHookMemoized::After","RSpec/Core/MemoizedHelpers/ContextHookMemoized/After.html#method-c-article","()",""],["article","RSpec::Core::MemoizedHelpers::ContextHookMemoized::Before","RSpec/Core/MemoizedHelpers/ContextHookMemoized/Before.html#method-c-article","()",""],["ascend","RSpec::Core::Metadata","RSpec/Core/Metadata.html#method-c-ascend","(metadata)","<p>@private Returns an enumerator that iteratively walks up the given metadata through all example group …\n"],["ascend_until","RSpec::Core::RubyProject","RSpec/Core/RubyProject.html#method-c-ascend_until","()",""],["ascending","RSpec::Core::Metadata","RSpec/Core/Metadata.html#method-c-ascending","(metadata)","<p>@private Iteratively walks up from the given metadata through all example group ancestors, yielding each …\n"],["assertions","RSpec::Core::MinitestAssertionsAdapter","RSpec/Core/MinitestAssertionsAdapter.html#method-i-assertions","()",""],["assign_const","RSpec::ExampleGroups","RSpec/ExampleGroups.html#method-c-assign_const","(group)",""],["attempt_to_add_rspec_terms_to_coderay_keywords","RSpec::Core::Formatters::SyntaxHighlighter","RSpec/Core/Formatters/SyntaxHighlighter.html#method-c-attempt_to_add_rspec_terms_to_coderay_keywords","()","<p>rubocop:disable Lint/RescueException rubocop:disable Lint/HandleExceptions\n"],["attr_accessor","RSpec::Core::HashImitatable::ClassMethods","RSpec/Core/HashImitatable/ClassMethods.html#method-i-attr_accessor","(*names)",""],["autorun","RSpec::Core::Runner","RSpec/Core/Runner.html#method-c-autorun","()","<p>Register an `at_exit` hook that runs the suite when the process exits.\n<p>@note This is not generally needed. …\n"],["autorun_disabled?","RSpec::Core::Runner","RSpec/Core/Runner.html#method-c-autorun_disabled-3F","()","<p>@private\n"],["backtrace_exclusion_patterns","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-backtrace_exclusion_patterns","()","<p>Regexps used to exclude lines from backtraces.\n<p>Excludes lines from ruby (and jruby) source, installed …\n"],["backtrace_exclusion_patterns=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-backtrace_exclusion_patterns-3D","(patterns)","<p>Set regular expressions used to exclude lines in backtrace. @param patterns [Array&lt;Regexp&gt;] set …\n"],["backtrace_inclusion_patterns","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-backtrace_inclusion_patterns","()","<p>Regexps used to include lines in backtraces.\n<p>Defaults to [Regexp.new Dir.getwd].\n<p>Lines that match an exclusion …\n"],["backtrace_inclusion_patterns=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-backtrace_inclusion_patterns-3D","(patterns)","<p>Set regular expressions used to include lines in backtrace. @attr patterns [Array&lt;Regexp&gt;] set …\n"],["backtrace_line","RSpec::Core::BacktraceFormatter","RSpec/Core/BacktraceFormatter.html#method-i-backtrace_line","(line)",""],["backwards_compatibility_default_proc","RSpec::Core::Metadata::ExampleGroupHash","RSpec/Core/Metadata/ExampleGroupHash.html#method-c-backwards_compatibility_default_proc","(&example_group_selector)",""],["base_name_for","RSpec::ExampleGroups","RSpec/ExampleGroups.html#method-c-base_name_for","(group)",""],["before","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-before","(scope=nil, *meta, &block)","<p>Defines a `before` hook. See {Hooks#before} for full docs.\n<p>This method differs from {Hooks#before} in …\n"],["before","RSpec::Core::Hooks","RSpec/Core/Hooks.html#method-i-before","(*args, &block)","<p>@api public\n<p>@overload before(&amp;block) @overload before(scope, &amp;block)\n\n<pre>@param scope [Symbol] `:example`, ...</pre>\n"],["before_context_ivars","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-before_context_ivars","()","<p>@private\n"],["bisect","RSpec::Core::Bisect::Coordinator","RSpec/Core/Bisect/Coordinator.html#method-i-bisect","()",""],["bisect","RSpec::Core::Bisect::ExampleMinimizer","RSpec/Core/Bisect/ExampleMinimizer.html#method-i-bisect","(candidate_ids)",""],["bisect_aborted","RSpec::Core::Formatters::BisectProgressFormatter","RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_aborted","(notification)",""],["bisect_complete","RSpec::Core::Formatters::BisectProgressFormatter","RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_complete","(notification)",""],["bisect_dependency_check_failed","RSpec::Core::Formatters::BisectDebugFormatter","RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_dependency_check_failed","(_notification)",""],["bisect_dependency_check_failed","RSpec::Core::Formatters::BisectProgressFormatter","RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_dependency_check_failed","(_notification)",""],["bisect_dependency_check_passed","RSpec::Core::Formatters::BisectDebugFormatter","RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_dependency_check_passed","(_notification)",""],["bisect_dependency_check_passed","RSpec::Core::Formatters::BisectProgressFormatter","RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_dependency_check_passed","(_notification)",""],["bisect_dependency_check_started","RSpec::Core::Formatters::BisectProgressFormatter","RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_dependency_check_started","(_notification)",""],["bisect_environment_hash","RSpec::Core::Bisect::ShellCommand","RSpec/Core/Bisect/ShellCommand.html#method-i-bisect_environment_hash","()",""],["bisect_failed","RSpec::Core::Formatters::BisectProgressFormatter","RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_failed","(notification)",""],["bisect_individual_run_complete","RSpec::Core::Formatters::BisectDebugFormatter","RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_individual_run_complete","(notification)",""],["bisect_individual_run_complete","RSpec::Core::Formatters::BisectProgressFormatter","RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_individual_run_complete","(_)",""],["bisect_individual_run_start","RSpec::Core::Formatters::BisectDebugFormatter","RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_individual_run_start","(notification)",""],["bisect_original_run_complete","RSpec::Core::Formatters::BisectDebugFormatter","RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_original_run_complete","(notification)",""],["bisect_original_run_complete","RSpec::Core::Formatters::BisectProgressFormatter","RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_original_run_complete","(notification)",""],["bisect_over","RSpec::Core::Bisect::ExampleMinimizer","RSpec/Core/Bisect/ExampleMinimizer.html#method-i-bisect_over","(candidate_ids)",""],["bisect_repro_command","RSpec::Core::Formatters::BisectProgressFormatter","RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_repro_command","(notification)",""],["bisect_round_detected_multiple_culprits","RSpec::Core::Formatters::BisectDebugFormatter","RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_round_detected_multiple_culprits","(_notification)",""],["bisect_round_detected_multiple_culprits","RSpec::Core::Formatters::BisectProgressFormatter","RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_round_detected_multiple_culprits","(notification)",""],["bisect_round_ignoring_ids","RSpec::Core::Formatters::BisectDebugFormatter","RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_round_ignoring_ids","(notification)",""],["bisect_round_ignoring_ids","RSpec::Core::Formatters::BisectProgressFormatter","RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_round_ignoring_ids","(notification)",""],["bisect_round_started","RSpec::Core::Formatters::BisectDebugFormatter","RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_round_started","(notification)",""],["bisect_round_started","RSpec::Core::Formatters::BisectProgressFormatter","RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_round_started","(notification, include_trailing_space=true)",""],["bisect_runner=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-bisect_runner-3D","(value)",""],["bisect_runner_class","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-bisect_runner_class","()","<p>@private\n"],["bisect_starting","RSpec::Core::Formatters::BisectProgressFormatter","RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_starting","(notification)",""],["bisect_with","RSpec::Core::Bisect::Coordinator","RSpec/Core/Bisect/Coordinator.html#method-c-bisect_with","(spec_runner, original_cli_args, formatter)",""],["build","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-c-build","()",""],["build","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-c-build","()",""],["build","RSpec::Core::Formatters::ExceptionPresenter::Factory","RSpec/Core/Formatters/ExceptionPresenter/Factory.html#method-i-build","()",""],["build_hash_from","RSpec::Core::Metadata","RSpec/Core/Metadata.html#method-c-build_hash_from","(args, warn_about_example_group_filtering=false)","<p>@private Used internally to build a hash from an args array. Symbols are converted into hash keys with …\n"],["call","RSpec::Core::DidYouMean","RSpec/Core/DidYouMean.html#method-i-call","()","<p>provide probable suggestions\n"],["call","RSpec::Core::Example::Procsy","RSpec/Core/Example/Procsy.html#method-i-call","(*args, &block)","<p>Calls the proc and notes that the example has been executed.\n"],["call","RSpec::Core::Invocations::Bisect","RSpec/Core/Invocations/Bisect.html#method-i-call","(options, err, out)",""],["call","RSpec::Core::Invocations::DRbWithFallback","RSpec/Core/Invocations/DRbWithFallback.html#method-i-call","(options, err, out)",""],["call","RSpec::Core::Invocations::InitializeProject","RSpec/Core/Invocations/InitializeProject.html#method-i-call","(*_args)",""],["call","RSpec::Core::Invocations::PrintVersion","RSpec/Core/Invocations/PrintVersion.html#method-i-call","(_options, _err, out)",""],["capture_run_results","RSpec::Core::Bisect::Server","RSpec/Core/Bisect/Server.html#method-i-capture_run_results","(files_or_directories_to_run=[], expected_failures=[])",""],["change_global_dsl","RSpec::Core::DSL","RSpec/Core/DSL.html#method-c-change_global_dsl","(&changes)","<p>@private\n"],["children","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-children","()","<p>@private\n"],["clear","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-clear","()",""],["clear","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-clear","()",""],["clear","RSpec::Core::Set","RSpec/Core/Set.html#method-i-clear","()",""],["clear_examples","RSpec","RSpec.html#method-c-clear_examples","()","<p>Used to ensure examples get reloaded between multiple runs in the same process and ensures user configuration …\n"],["close","RSpec::Core::Bisect::Channel","RSpec/Core/Bisect/Channel.html#method-i-close","()","<p>rubocop:enable Security/MarshalLoad\n"],["close","RSpec::Core::Formatters::BaseFormatter","RSpec/Core/Formatters/BaseFormatter.html#method-i-close","(_notification)","<p>@api public\n<p>@param _notification [NullNotification] (Ignored) @see RSpec::Core::Formatters::Protocol#close …\n"],["close","RSpec::Core::Formatters::BaseTextFormatter","RSpec/Core/Formatters/BaseTextFormatter.html#method-i-close","(_notification)","<p>@api public\n<p>Invoked at the end of a suite run. Allows the formatter to do any tidying up, but be aware …\n"],["close","RSpec::Core::Formatters::JsonFormatter","RSpec/Core/Formatters/JsonFormatter.html#method-i-close","(_notification)",""],["close_after","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-close_after","()","<p>@private\n"],["color","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-color","()","<p>Enables color output if the output is a TTY.  As of RSpec 3.6, this is the default behavior and this …\n"],["color_enabled?","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-color_enabled-3F","(output=output_stream)","<p>Check if color is enabled for a particular output. @param output [IO] an output stream to use, defaults …\n"],["color_mode","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-color_mode","()","<p>The mode for determining whether to display output in color. One of:\n<p>:automatic - the output will be in …\n"],["colorized_formatted_backtrace","RSpec::Core::Formatters::ExceptionPresenter","RSpec/Core/Formatters/ExceptionPresenter.html#method-i-colorized_formatted_backtrace","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)",""],["colorized_formatted_backtrace","RSpec::Core::Notifications::FailedExampleNotification","RSpec/Core/Notifications/FailedExampleNotification.html#method-i-colorized_formatted_backtrace","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>Returns the failures colorized formatted backtrace.\n<p>@param colorizer [#wrap] An object to colorize the …\n"],["colorized_message_lines","RSpec::Core::Formatters::ExceptionPresenter","RSpec/Core/Formatters/ExceptionPresenter.html#method-i-colorized_message_lines","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)",""],["colorized_message_lines","RSpec::Core::Notifications::FailedExampleNotification","RSpec/Core/Notifications/FailedExampleNotification.html#method-i-colorized_message_lines","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>Returns the message generated for this failure colorized line by line.\n<p>@param colorizer [#wrap] An object …\n"],["colorized_rerun_commands","RSpec::Core::Notifications::SummaryNotification","RSpec/Core/Notifications/SummaryNotification.html#method-i-colorized_rerun_commands","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@api public\n<p>Formats failures into a rerunable command format.\n<p>@param colorizer [#wrap] An object which …\n"],["colorized_totals_line","RSpec::Core::Notifications::SummaryNotification","RSpec/Core/Notifications/SummaryNotification.html#method-i-colorized_totals_line","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@api public\n<p>Wraps the results line with colors based on the configured colors for failure, pending, and …\n"],["command_for","RSpec::Core::Bisect::ShellCommand","RSpec/Core/Bisect/ShellCommand.html#method-i-command_for","(locations, server)",""],["conditionally_quote","RSpec::Core::ShellEscape","RSpec/Core/ShellEscape.html#method-i-conditionally_quote","(id)",""],["config_colors_to_methods","RSpec::Core::Formatters::ConsoleCodes","RSpec/Core/Formatters/ConsoleCodes.html#method-i-config_colors_to_methods","()","<p>@private\n"],["configuration","RSpec","RSpec.html#method-c-configuration","()","<p>Returns the global [Configuration](RSpec/Core/Configuration) object. While you <em>can</em> use this method to …\n"],["configuration","RSpec::Core::MockingAdapters::RSpec","RSpec/Core/MockingAdapters/RSpec.html#method-c-configuration","()",""],["configure","RSpec","RSpec.html#method-c-configure","()","<p>Yields the global configuration to a block. @yield [Configuration] global configuration\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RSpec</span>.<span class=\"ruby-identifier\">configure</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["configure","RSpec::Core::ConfigurationOptions","RSpec/Core/ConfigurationOptions.html#method-i-configure","(config)","<p>Updates the provided {Configuration} instance based on the provided external configuration options.\n<p>@param …\n"],["configure","RSpec::Core::Runner","RSpec/Core/Runner.html#method-i-configure","(err, out)","<p>@private\n"],["configure_example","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-configure_example","(example, example_hooks)","<p>@private\n<p>Used internally to extend the singleton class of a single example&#39;s example group instance …\n"],["configure_expectation_framework","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-configure_expectation_framework","()","<p>@private\n"],["configure_filter_manager","RSpec::Core::ConfigurationOptions","RSpec/Core/ConfigurationOptions.html#method-i-configure_filter_manager","(filter_manager)","<p>@api private Updates the provided {FilterManager} based on the filter options. @param filter_manager …\n"],["configure_group","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-configure_group","(group)","<p>@private\n<p>Used internally to extend a group with modules using `include`, `prepend` and/or `extend`.\n"],["configure_mock_framework","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-configure_mock_framework","()","<p>@private\n"],["console_code_for","RSpec::Core::Formatters::ConsoleCodes","RSpec/Core/Formatters/ConsoleCodes.html#method-i-console_code_for","(code_or_symbol)","<p>Fetches the correct code for the supplied symbol, or checks that a code is valid. Defaults to white (37). …\n"],["const_missing","RSpec","RSpec.html#method-c-const_missing","(name)","<p>@private\n"],["constant_scope_for","RSpec::ExampleGroups","RSpec/ExampleGroups.html#method-c-constant_scope_for","(group)",""],["convert","RSpec::Core::Formatters::HtmlSnippetExtractor::CoderayConverter","RSpec/Core/Formatters/HtmlSnippetExtractor/CoderayConverter.html#method-c-convert","(code)",""],["convert","RSpec::Core::Formatters::HtmlSnippetExtractor::NullConverter","RSpec/Core/Formatters/HtmlSnippetExtractor/NullConverter.html#method-c-convert","(code)",""],["create","RSpec::Core::Metadata::ExampleGroupHash","RSpec/Core/Metadata/ExampleGroupHash.html#method-c-create","(parent_group_metadata, user_metadata, example_group_index, *args, &block)",""],["create","RSpec::Core::Metadata::ExampleHash","RSpec/Core/Metadata/ExampleHash.html#method-c-create","(group_metadata, user_metadata, index_provider, description, block)",""],["current_backtrace","RSpec::Core::SharedExampleGroupInclusionStackFrame","RSpec/Core/SharedExampleGroupInclusionStackFrame.html#method-c-current_backtrace","()","<p>@private\n"],["current_example","RSpec","RSpec.html#method-c-current_example","()","<p>The example being executed.\n<p>The primary audience for this method is library authors who need access to …\n"],["current_example=","RSpec","RSpec.html#method-c-current_example-3D","(example)","<p>Set the current example being executed. @api private\n"],["currently_executing_a_context_hook?","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-currently_executing_a_context_hook-3F","()","<p>Returns true if a `before(:context)` or `after(:context)` hook is currently executing.\n"],["currently_needed_ids","RSpec::Core::Bisect::ExampleMinimizer","RSpec/Core/Bisect/ExampleMinimizer.html#method-i-currently_needed_ids","()",""],["declaration_locations","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-declaration_locations","()","<p>@private\n"],["deep_hash_dup","RSpec::Core::Metadata","RSpec/Core/Metadata.html#method-c-deep_hash_dup","(object)","<p>@private\n"],["default_formatter","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-default_formatter","()","<p>The formatter that will be used if no formatter has been set. Defaults to &#39;progress&#39;.\n"],["default_formatter=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-default_formatter-3D","(value)","<p>Sets a fallback formatter to use if none other has been set.\n<p>@example\n\n<pre>RSpec.configure do |rspec|\n  rspec.default_formatter ...</pre>\n"],["default_path=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-default_path-3D","(path)",""],["define_alias","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-c-define_alias","(name, alias_name)","<p>@private\n"],["define_derived_metadata","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-define_derived_metadata","(*filters, &block)","<p>Defines a callback that can assign derived metadata values.\n<p>@param filters [Array&lt;Symbol&gt;, Hash] …\n"],["define_example_group_method","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-define_example_group_method","(name, metadata={})","<p>@private @macro [attach] define_example_group_method\n\n<pre>@!scope class\n@overload $1\n@overload $1(&amp;example_group_definition) ...</pre>\n"],["define_example_method","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-define_example_method","(name, extra_options={})","<p>@private @macro [attach] define_example_method\n\n<pre> @!scope class\n @method $1\n @overload $1\n @overload $1(&amp;example_implementation) ...</pre>\n"],["define_nested_shared_group_method","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-define_nested_shared_group_method","(new_name, report_label=\"it should behave like\")","<p>@private @macro [attach] define_nested_shared_group_method\n\n<pre>@!scope class\n\n@see SharedExampleGroup</pre>\n"],["define_predicate","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-c-define_predicate","(name)","<p>@private\n"],["define_reader","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-c-define_reader","(name)","<p>@private\n"],["definitions","RSpec::Core::SharedExampleGroup::TopLevelDSL","RSpec/Core/SharedExampleGroup/TopLevelDSL.html#method-c-definitions","()","<p>@private\n"],["delegate_to_metadata","RSpec::Core::Example","RSpec/Core/Example.html#method-c-delegate_to_metadata","(key)","<p>@private\n<p>Used to define methods that delegate to this example&#39;s metadata.\n"],["delegate_to_metadata","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-delegate_to_metadata","(*names)","<p>@private\n"],["delegate_to_ordering_manager","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-c-delegate_to_ordering_manager","(*methods)","<p>@private\n"],["delete","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-delete","(key)",""],["delete","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-delete","(key)",""],["delete","RSpec::Core::FilterableItemRepository::QueryOptimized","RSpec/Core/FilterableItemRepository/QueryOptimized.html#method-i-delete","(item, metadata)",""],["delete","RSpec::Core::FilterableItemRepository::UpdateOptimized","RSpec/Core/FilterableItemRepository/UpdateOptimized.html#method-i-delete","(item, metadata)",""],["delete","RSpec::Core::Set","RSpec/Core/Set.html#method-i-delete","(key)",""],["deprecate","RSpec::Core::Warnings","RSpec/Core/Warnings.html#method-i-deprecate","(deprecated, data={})","<p>@private\n<p>Used internally to print deprecation warnings.\n"],["deprecation","RSpec::Core::Configuration::DeprecationReporterBuffer","RSpec/Core/Configuration/DeprecationReporterBuffer.html#method-i-deprecation","(*args)",""],["deprecation","RSpec::Core::Formatters::DeprecationFormatter","RSpec/Core/Formatters/DeprecationFormatter.html#method-i-deprecation","(notification)",""],["deprecation","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-deprecation","(hash)","<p>@private\n"],["deprecation_message_for","RSpec::Core::Formatters::DeprecationFormatter","RSpec/Core/Formatters/DeprecationFormatter.html#method-i-deprecation_message_for","(data)",""],["deprecation_stream=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-deprecation_stream-3D","(value)","<p>Determines where deprecation warnings are printed. @param value [IO, String] IO to write to or filename …\n"],["deprecation_summary","RSpec::Core::Formatters::DeprecationFormatter","RSpec/Core/Formatters/DeprecationFormatter.html#method-i-deprecation_summary","(_notification)",""],["deprecation_summary","RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter","RSpec/Core/Formatters/DeprecationFormatter/DelayedPrinter.html#method-i-deprecation_summary","()",""],["deprecation_summary","RSpec::Core::Formatters::DeprecationFormatter::ImmediatePrinter","RSpec/Core/Formatters/DeprecationFormatter/ImmediatePrinter.html#method-i-deprecation_summary","()",""],["descendant_filtered_examples","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-descendant_filtered_examples","()","<p>@private\n"],["descendants","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-descendants","()","<p>@private\n"],["described_class","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-i-described_class","()","<p>Returns the class or module passed to the `describe` method (or alias). Returns nil if the subject is …\n"],["description","RSpec::Core::Example","RSpec/Core/Example.html#method-i-description","()","<p>Returns the string submitted to `example` or its aliases (e.g. `specify`, `it`, etc). If no string is …\n"],["description","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-description","()","<p>@return [String] the current example group description\n"],["description","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-description","()",""],["description","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-description","()",""],["description","RSpec::Core::Notifications::FailedExampleNotification","RSpec/Core/Notifications/FailedExampleNotification.html#method-i-description","()","<p>@return [String] The example description\n"],["description","RSpec::Core::SharedExampleGroupInclusionStackFrame","RSpec/Core/SharedExampleGroupInclusionStackFrame.html#method-i-description","()","<p>@return [String] Description of this stack frame, in the form used by\n\n<pre>RSpec&#39;s built-in formatters.</pre>\n"],["determine_root","RSpec::Core::RubyProject","RSpec/Core/RubyProject.html#method-c-determine_root","()",""],["disable_autorun!","RSpec::Core::Runner","RSpec/Core/Runner.html#method-c-disable_autorun-21","()","<p>@private\n"],["disable_monkey_patching!","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-disable_monkey_patching-21","()","<p>Enables zero monkey patching mode for RSpec. It removes monkey patching of the top-level DSL methods …\n"],["disambiguate","RSpec::ExampleGroups","RSpec/ExampleGroups.html#method-c-disambiguate","(name, const_scope)",""],["dispatch_specs","RSpec::Core::Bisect::ForkRunner::RunDispatcher","RSpec/Core/Bisect/ForkRunner/RunDispatcher.html#method-i-dispatch_specs","(run_descriptor)",""],["display_exception","RSpec::Core::Example","RSpec/Core/Example.html#method-i-display_exception","()","<p>@private\n<p>The exception that will be displayed to the user – either the failure of the example or the …\n"],["display_exception=","RSpec::Core::Example","RSpec/Core/Example.html#method-i-display_exception-3D","(ex)","<p>@private\n<p>Assigns the exception that will be displayed to the user – either the failure of the example …\n"],["drb_argv","RSpec::Core::DRbRunner","RSpec/Core/DRbRunner.html#method-i-drb_argv","()",""],["drb_port","RSpec::Core::Bisect::Server","RSpec/Core/Bisect/Server.html#method-i-drb_port","()",""],["drb_port","RSpec::Core::DRbRunner","RSpec/Core/DRbRunner.html#method-i-drb_port","()",""],["dump","RSpec::Core::ExampleStatusDumper","RSpec/Core/ExampleStatusDumper.html#method-c-dump","(examples)",""],["dump","RSpec::Core::ExampleStatusDumper","RSpec/Core/ExampleStatusDumper.html#method-i-dump","()",""],["dump_failures","RSpec::Core::Formatters::BaseTextFormatter","RSpec/Core/Formatters/BaseTextFormatter.html#method-i-dump_failures","(notification)","<p>@api public\n<p>Dumps detailed information about each example failure.\n<p>@param notification [NullNotification] …\n"],["dump_pending","RSpec::Core::Formatters::BaseTextFormatter","RSpec/Core/Formatters/BaseTextFormatter.html#method-i-dump_pending","(notification)","<p>@private\n"],["dump_profile","RSpec::Core::Formatters::FailureListFormatter","RSpec/Core/Formatters/FailureListFormatter.html#method-i-dump_profile","(_profile)","<p>Discard profile and messages\n<p>These outputs are not really relevant in the context of this failure list …\n"],["dump_profile","RSpec::Core::Formatters::JsonFormatter","RSpec/Core/Formatters/JsonFormatter.html#method-i-dump_profile","(profile)",""],["dump_profile","RSpec::Core::Formatters::ProfileFormatter","RSpec/Core/Formatters/ProfileFormatter.html#method-i-dump_profile","(profile)","<p>@api public\n<p>This method is invoked after the dumping the summary if profiling is enabled.\n<p>@param profile …\n"],["dump_profile_slowest_example_groups","RSpec::Core::Formatters::JsonFormatter","RSpec/Core/Formatters/JsonFormatter.html#method-i-dump_profile_slowest_example_groups","(profile)","<p>@api private\n"],["dump_profile_slowest_examples","RSpec::Core::Formatters::JsonFormatter","RSpec/Core/Formatters/JsonFormatter.html#method-i-dump_profile_slowest_examples","(profile)","<p>@api private\n"],["dump_summary","RSpec::Core::Formatters::BaseTextFormatter","RSpec/Core/Formatters/BaseTextFormatter.html#method-i-dump_summary","(summary)","<p>@api public\n<p>This method is invoked after the dumping of examples and failures. Each parameter is assigned …\n"],["dump_summary","RSpec::Core::Formatters::HtmlFormatter","RSpec/Core/Formatters/HtmlFormatter.html#method-i-dump_summary","(summary)",""],["dump_summary","RSpec::Core::Formatters::JsonFormatter","RSpec/Core/Formatters/JsonFormatter.html#method-i-dump_summary","(summary)",""],["duplicate_with","RSpec::Core::Example","RSpec/Core/Example.html#method-i-duplicate_with","(metadata_overrides={})","<p>Duplicates the example and overrides metadata with the provided hash.\n<p>@param metadata_overrides [Hash] …\n"],["each","RSpec::Core::Set","RSpec/Core/Set.html#method-i-each","(&block)",""],["each_instance_variable_for_example","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-each_instance_variable_for_example","(group)","<p>@private\n"],["each_pair","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-each_pair","(&block)",""],["each_pair","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-each_pair","(&block)",""],["empty?","RSpec::Core::FilterManager","RSpec/Core/FilterManager.html#method-i-empty-3F","()",""],["empty?","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-empty-3F","()",""],["empty?","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-empty-3F","()",""],["empty?","RSpec::Core::Set","RSpec/Core/Set.html#method-i-empty-3F","()",""],["ensure_example_groups_are_configured","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-ensure_example_groups_are_configured","()","<p>@private\n"],["ensure_timing_set","RSpec::Core::Example::ExecutionResult","RSpec/Core/Example/ExecutionResult.html#method-i-ensure_timing_set","(clock)","<p>@api private Populates finished_at and run_time if it has not yet been set\n"],["escape","RSpec::Core::ShellEscape","RSpec/Core/ShellEscape.html#method-i-escape","(argument)","<p>:nocov:\n"],["everything_filtered_message","RSpec::Core::World","RSpec/Core/World.html#method-i-everything_filtered_message","()","<p>@private\n"],["example_count","RSpec::Core::Notifications::SummaryNotification","RSpec/Core/Notifications/SummaryNotification.html#method-i-example_count","()","<p>@api @return [Fixnum] the number of examples run\n"],["example_count","RSpec::Core::World","RSpec/Core/World.html#method-i-example_count","(groups=example_groups)","<p>@api private\n<p>Get count of examples to be run.\n"],["example_failed","RSpec::Core::Formatters::BaseBisectFormatter","RSpec/Core/Formatters/BaseBisectFormatter.html#method-i-example_failed","(notification)",""],["example_failed","RSpec::Core::Formatters::DocumentationFormatter","RSpec/Core/Formatters/DocumentationFormatter.html#method-i-example_failed","(failure)",""],["example_failed","RSpec::Core::Formatters::FailureListFormatter","RSpec/Core/Formatters/FailureListFormatter.html#method-i-example_failed","(failure)",""],["example_failed","RSpec::Core::Formatters::HtmlFormatter","RSpec/Core/Formatters/HtmlFormatter.html#method-i-example_failed","(failure)",""],["example_failed","RSpec::Core::Formatters::ProgressFormatter","RSpec/Core/Formatters/ProgressFormatter.html#method-i-example_failed","(_notification)",""],["example_failed","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-example_failed","(example)","<p>@private\n"],["example_finished","RSpec::Core::Formatters::BaseBisectFormatter","RSpec/Core/Formatters/BaseBisectFormatter.html#method-i-example_finished","(notification)",""],["example_finished","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-example_finished","(example)","<p>@private\n"],["example_group","RSpec::Core::Example","RSpec/Core/Example.html#method-i-example_group","()","<p>Returns the example group class that provides the context for running this example.\n"],["example_group_aliases","RSpec::Core::DSL","RSpec/Core/DSL.html#method-c-example_group_aliases","()","<p>@private\n"],["example_group_finished","RSpec::Core::Formatters::DocumentationFormatter","RSpec/Core/Formatters/DocumentationFormatter.html#method-i-example_group_finished","(_notification)",""],["example_group_finished","RSpec::Core::Profiler","RSpec/Core/Profiler.html#method-i-example_group_finished","(notification)",""],["example_group_finished","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-example_group_finished","(group)","<p>@private\n"],["example_group_started","RSpec::Core::Formatters::BaseFormatter","RSpec/Core/Formatters/BaseFormatter.html#method-i-example_group_started","(notification)","<p>@api public\n<p>@param notification [GroupNotification] containing example_group\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">subclass</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-string\">`RSpec::Core::ExampleGroup`</span>\n</pre>\n"],["example_group_started","RSpec::Core::Formatters::DocumentationFormatter","RSpec/Core/Formatters/DocumentationFormatter.html#method-i-example_group_started","(notification)",""],["example_group_started","RSpec::Core::Formatters::HtmlFormatter","RSpec/Core/Formatters/HtmlFormatter.html#method-i-example_group_started","(notification)",""],["example_group_started","RSpec::Core::Profiler","RSpec/Core/Profiler.html#method-i-example_group_started","(notification)",""],["example_group_started","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-example_group_started","(group)","<p>@private\n"],["example_groups","RSpec::Core::World::Null","RSpec/Core/World/Null.html#method-c-example_groups","()","<p>:nocov:\n"],["example_passed","RSpec::Core::Formatters::DocumentationFormatter","RSpec/Core/Formatters/DocumentationFormatter.html#method-i-example_passed","(passed)",""],["example_passed","RSpec::Core::Formatters::HtmlFormatter","RSpec/Core/Formatters/HtmlFormatter.html#method-i-example_passed","(passed)",""],["example_passed","RSpec::Core::Formatters::ProgressFormatter","RSpec/Core/Formatters/ProgressFormatter.html#method-i-example_passed","(_notification)",""],["example_passed","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-example_passed","(example)","<p>@private\n"],["example_pending","RSpec::Core::Formatters::DocumentationFormatter","RSpec/Core/Formatters/DocumentationFormatter.html#method-i-example_pending","(pending)",""],["example_pending","RSpec::Core::Formatters::HtmlFormatter","RSpec/Core/Formatters/HtmlFormatter.html#method-i-example_pending","(pending)",""],["example_pending","RSpec::Core::Formatters::ProgressFormatter","RSpec/Core/Formatters/ProgressFormatter.html#method-i-example_pending","(_notification)",""],["example_pending","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-example_pending","(example)","<p>@private\n"],["example_skipped?","RSpec::Core::Example::ExecutionResult","RSpec/Core/Example/ExecutionResult.html#method-i-example_skipped-3F","()","<p>@return [Boolean] Indicates if the example was completely skipped\n\n<pre>(typically done via `:skip` metadata ...</pre>\n"],["example_started","RSpec::Core::Formatters::DocumentationFormatter","RSpec/Core/Formatters/DocumentationFormatter.html#method-i-example_started","(_notification)",""],["example_started","RSpec::Core::Formatters::HtmlFormatter","RSpec/Core/Formatters/HtmlFormatter.html#method-i-example_started","(_notification)",""],["example_started","RSpec::Core::Profiler","RSpec/Core/Profiler.html#method-i-example_started","(notification)",""],["example_started","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-example_started","(example)","<p>@private\n"],["example_status_persistence_file_path=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-example_status_persistence_file_path-3D","(value)","<p>Sets the file path to use for persisting example statuses. Necessary for the `–only-failures` and `–next-failure` …\n"],["examples","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-examples","()","<p>@private\n"],["examples","RSpec::Core::Notifications::ExamplesNotification","RSpec/Core/Notifications/ExamplesNotification.html#method-i-examples","()","<p>@return [Array&lt;RSpec::Core::Example&gt;] list of examples\n"],["exception","RSpec::Core::Notifications::FailedExampleNotification","RSpec/Core/Notifications/FailedExampleNotification.html#method-i-exception","()","<p>@return [Exception] The example failure\n"],["exception_count_description","RSpec::Core::MultipleExceptionError","RSpec/Core/MultipleExceptionError.html#method-i-exception_count_description","()","<p>return [String] A description of the failure/error counts.\n"],["exclude","RSpec::Core::FilterManager","RSpec/Core/FilterManager.html#method-i-exclude","(*args)",""],["exclude?","RSpec::Core::BacktraceFormatter","RSpec/Core/BacktraceFormatter.html#method-i-exclude-3F","(line)",""],["exclude_only","RSpec::Core::FilterManager","RSpec/Core/FilterManager.html#method-i-exclude_only","(*args)",""],["exclude_pattern=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-exclude_pattern-3D","(value)","<p>Set pattern to match files to exclude. @attr value [String] the filename pattern to exclude spec files …\n"],["exclude_with_low_priority","RSpec::Core::FilterManager","RSpec/Core/FilterManager.html#method-i-exclude_with_low_priority","(*args)",""],["exclusion_filter","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-exclusion_filter","()","<p>Returns the `exclusion_filter`. If none has been set, returns an empty hash.\n"],["exclusion_filter","RSpec::Core::World","RSpec/Core/World.html#method-i-exclusion_filter","()","<p>@private\n"],["exclusion_filter=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-exclusion_filter-3D","(filter)","<p>Clears and reassigns the `exclusion_filter`. Set to `nil` if you don&#39;t want any exclusion filter …\n"],["execute_with","RSpec::Core::Hooks::AroundHook","RSpec/Core/Hooks/AroundHook.html#method-i-execute_with","(example, procsy)",""],["executed?","RSpec::Core::Example::Procsy","RSpec/Core/Example/Procsy.html#method-i-executed-3F","()","<p>Indicates whether or not the around hook has executed the example.\n"],["exit_early","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-exit_early","(exit_code)","<p>@param exit_code [Integer] the exit_code to be return by the reporter\n<p>Reports a run that exited early …\n"],["expect_with","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-expect_with","(*frameworks)","<p>Sets the expectation framework module(s) to be included in each example group.\n<p>`frameworks` can be `:rspec`, …\n"],["expectation_framework=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-expectation_framework-3D","(framework)","<p>Delegates to expect_with(framework).\n"],["expectation_frameworks","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-expectation_frameworks","()","<p>Returns the configured expectation framework adapter module(s)\n"],["expose_current_running_example_as","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-expose_current_running_example_as","(method_name)","<p>Exposes the current running example via the named helper method. RSpec 2.x exposed this via `example`, …\n"],["expose_dsl_globally=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-expose_dsl_globally-3D","(value)","<p>Use this to expose the core RSpec DSL via `Module` and the `main` object. It will be set automatically …\n"],["expose_dsl_globally?","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-expose_dsl_globally-3F","()","<p>Indicates if the DSL has been exposed off of modules and `main`. Default: true @return [Boolean]\n"],["expose_example_group_alias","RSpec::Core::DSL","RSpec/Core/DSL.html#method-c-expose_example_group_alias","(name)","<p>@private\n"],["expose_example_group_alias_globally","RSpec::Core::DSL","RSpec/Core/DSL.html#method-c-expose_example_group_alias_globally","(method_name)","<p>@private\n"],["expose_globally!","RSpec::Core::DSL","RSpec/Core/DSL.html#method-c-expose_globally-21","()","<p>Adds the describe method to Module and the top level binding. @api private\n"],["expose_globally!","RSpec::Core::SharedExampleGroup::TopLevelDSL","RSpec/Core/SharedExampleGroup/TopLevelDSL.html#method-c-expose_globally-21","()","<p>@api private\n<p>Adds the top level DSL methods to Module and the top level binding.\n"],["exposed_globally?","RSpec::Core::DSL","RSpec/Core/DSL.html#method-c-exposed_globally-3F","()","<p>@private\n"],["exposed_globally?","RSpec::Core::SharedExampleGroup::TopLevelDSL","RSpec/Core/SharedExampleGroup/TopLevelDSL.html#method-c-exposed_globally-3F","()","<p>@private\n"],["expression_lines","RSpec::Core::Formatters::SnippetExtractor","RSpec/Core/Formatters/SnippetExtractor.html#method-i-expression_lines","()",""],["expression_node","RSpec::Core::Formatters::SnippetExtractor","RSpec/Core/Formatters/SnippetExtractor.html#method-i-expression_node","()",""],["expression_outmost_node?","RSpec::Core::Formatters::SnippetExtractor","RSpec/Core/Formatters/SnippetExtractor.html#method-i-expression_outmost_node-3F","(node)",""],["extend","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-extend","(mod, *filters)","<p>Tells RSpec to extend example groups with `mod`. Methods defined in `mod` are exposed to example groups …\n"],["extract_expression_lines_at","RSpec::Core::Formatters::SnippetExtractor","RSpec/Core/Formatters/SnippetExtractor.html#method-c-extract_expression_lines_at","(file_path, beginning_line_number, max_line_count=nil)",""],["extract_line_at","RSpec::Core::Formatters::SnippetExtractor","RSpec/Core/Formatters/SnippetExtractor.html#method-c-extract_line_at","(file_path, line_number)",""],["fail_fast=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-fail_fast-3D","(value)","<p>@see fail_fast\n"],["fail_fast_limit_met?","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-fail_fast_limit_met-3F","()","<p>@private\n"],["fail_with_exception","RSpec::Core::Example","RSpec/Core/Example.html#method-i-fail_with_exception","(reporter, exception)","<p>@private\n<p>Used internally to set an exception and fail without actually executing the example when an exception …\n"],["failed_examples","RSpec::Core::Notifications::ExamplesNotification","RSpec/Core/Notifications/ExamplesNotification.html#method-i-failed_examples","()","<p>@return [Array&lt;RSpec::Core::Example&gt;] list of failed examples\n"],["failure_count","RSpec::Core::Notifications::SummaryNotification","RSpec/Core/Notifications/SummaryNotification.html#method-i-failure_count","()","<p>@api @return [Fixnum] the number of failed examples\n"],["failure_notifications","RSpec::Core::Notifications::ExamplesNotification","RSpec/Core/Notifications/ExamplesNotification.html#method-i-failure_notifications","()","<p>@return [Array&lt;RSpec::Core::Notifications::FailedExampleNotification&gt;]\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">returns</span> <span class=\"ruby-identifier\">failed</span> <span class=\"ruby-identifier\">examples</span> <span class=\"ruby-identifier\">as</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["fetch","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-fetch","(*args, &block)",""],["fetch","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-fetch","(*args, &block)",""],["fetch","RSpec::Core::Ordering::Registry","RSpec/Core/Ordering/Registry.html#method-i-fetch","(name, &fallback)",""],["fetch_or_store","RSpec::Core::MemoizedHelpers::ContextHookMemoized","RSpec/Core/MemoizedHelpers/ContextHookMemoized.html#method-c-fetch_or_store","(key, &_block)",""],["fetch_or_store","RSpec::Core::MemoizedHelpers::NonThreadSafeMemoized","RSpec/Core/MemoizedHelpers/NonThreadSafeMemoized.html#method-i-fetch_or_store","(key)",""],["fetch_or_store","RSpec::Core::MemoizedHelpers::ThreadsafeMemoized","RSpec/Core/MemoizedHelpers/ThreadsafeMemoized.html#method-i-fetch_or_store","(key)",""],["files_or_directories_to_run=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-files_or_directories_to_run-3D","(*files)","<p>@private\n"],["files_to_run","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-files_to_run","()","<p>The spec files RSpec will run. @return [Array] specified files about to run\n"],["filter","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-filter","()",""],["filter=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-filter-3D","(filter)",""],["filter_applies?","RSpec::Core::MetadataFilter","RSpec/Core/MetadataFilter.html#method-c-filter_applies-3F","(key, filter_value, metadata)","<p>@private\n"],["filter_gem","RSpec::Core::BacktraceFormatter","RSpec/Core/BacktraceFormatter.html#method-i-filter_gem","(gem_name)",""],["filter_gems_from_backtrace","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-filter_gems_from_backtrace","(*gem_names)","<p>Adds {#backtrace_exclusion_patterns} that will filter lines from the named gems from backtraces.\n<p>@param …\n"],["filter_manager","RSpec::Core::World","RSpec/Core/World.html#method-i-filter_manager","()","<p>@private\n"],["filter_run","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-filter_run","(*args)",""],["filter_run_excluding","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-filter_run_excluding","(*args)","<p>Adds key/value pairs to the `exclusion_filter`. If `args` includes any symbols that are not part of the …\n"],["filter_run_including","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-filter_run_including","(*args)","<p>Adds key/value pairs to the `inclusion_filter`. If `args` includes any symbols that are not part of the …\n"],["filter_run_when_matching","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-filter_run_when_matching","(*args)","<p>Applies the provided filter only if any of examples match, in constrast to {#filter_run}, which always …\n"],["filtered_examples","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-filtered_examples","()","<p>@private\n"],["find","RSpec::Core::SharedExampleGroup::Registry","RSpec/Core/SharedExampleGroup/Registry.html#method-i-find","(lookup_contexts, name)",""],["find_and_eval_shared","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-find_and_eval_shared","(label, name, inclusion_location, *args, &customization_block)","<p>@private\n"],["find_first_parent_containing","RSpec::Core::RubyProject","RSpec/Core/RubyProject.html#method-c-find_first_parent_containing","(dir)",""],["find_items_for","RSpec::Core::FilterableItemRepository::QueryOptimized","RSpec/Core/FilterableItemRepository/QueryOptimized.html#method-i-find_items_for","(metadata)",""],["find_minimal_repro","RSpec::Core::Bisect::ExampleMinimizer","RSpec/Core/Bisect/ExampleMinimizer.html#method-i-find_minimal_repro","()",""],["finish","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-finish","()","<p>@private\n"],["flat_map","RSpec::Core::FlatMap","RSpec/Core/FlatMap.html#method-c-flat_map","(array, &block)",""],["flush","RSpec::Core::Formatters::HtmlPrinter","RSpec/Core/Formatters/HtmlPrinter.html#method-i-flush","()",""],["for","RSpec::Core::MultipleExceptionError::InterfaceTag","RSpec/Core/MultipleExceptionError/InterfaceTag.html#method-c-for","(ex)","<p>Provides a way to force `ex` to be something that satisfies the multiple exception error interface.  …\n"],["for","RSpec::Core::Notifications::CustomNotification","RSpec/Core/Notifications/CustomNotification.html#method-c-for","(options={})","<p>@param options [Hash] A hash of method / value pairs to create on this notification @return [CustomNotification] …\n"],["for","RSpec::Core::Notifications::ExampleNotification","RSpec/Core/Notifications/ExampleNotification.html#method-c-for","(example)","<p>@private\n"],["for_failed_spec_run","RSpec::Core::Bisect::BisectFailedError","RSpec/Core/Bisect/BisectFailedError.html#method-c-for_failed_spec_run","(spec_output)",""],["for_filtered_examples","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-for_filtered_examples","(reporter, &block)","<p>@private\n"],["force","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-force","(hash)","<p>@private\n<p>Used to set higher priority option values from the command line.\n"],["force","RSpec::Core::Ordering::ConfigurationManager","RSpec/Core/Ordering/ConfigurationManager.html#method-i-force","(hash)",""],["format_backtrace","RSpec::Core::BacktraceFormatter","RSpec/Core/BacktraceFormatter.html#method-i-format_backtrace","(backtrace, options={})",""],["format_backtrace","RSpec::Core::Formatters::ExceptionPresenter::Factory::EmptyBacktraceFormatter","RSpec/Core/Formatters/ExceptionPresenter/Factory/EmptyBacktraceFormatter.html#method-c-format_backtrace","(*)",""],["format_docstrings","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-format_docstrings","(&block)","<p>Formats the docstring output using the block provided.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># This will strip the descriptions of both ...</span>\n</pre>\n"],["format_docstrings_block","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-format_docstrings_block","()","<p>@private\n"],["format_duration","RSpec::Core::Formatters::Helpers","RSpec/Core/Formatters/Helpers.html#method-c-format_duration","(duration)","<p>@api private\n<p>Formats seconds into a human-readable string.\n<p>@param duration [Float, Fixnum] in seconds @return …\n"],["format_seconds","RSpec::Core::Formatters::Helpers","RSpec/Core/Formatters/Helpers.html#method-c-format_seconds","(float, precision=nil)","<p>@api private\n<p>Formats seconds to have 5 digits of precision with trailing zeros removed if the number is …\n"],["formatted_backtrace","RSpec::Core::Formatters::ExceptionPresenter","RSpec/Core/Formatters/ExceptionPresenter.html#method-i-formatted_backtrace","(exception=@exception)",""],["formatted_backtrace","RSpec::Core::Notifications::FailedExampleNotification","RSpec/Core/Notifications/FailedExampleNotification.html#method-i-formatted_backtrace","()","<p>Returns the failures formatted backtrace.\n<p>@return [Array&lt;String&gt;] the examples backtrace lines\n"],["formatted_cause","RSpec::Core::Formatters::ExceptionPresenter","RSpec/Core/Formatters/ExceptionPresenter.html#method-i-formatted_cause","(exception)",""],["formatted_duration","RSpec::Core::Notifications::SummaryNotification","RSpec/Core/Notifications/SummaryNotification.html#method-i-formatted_duration","()","<p>@return [String] a formatted version of the time it took to run the\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">suite</span>\n</pre>\n"],["formatted_inclusion_location","RSpec::Core::SharedExampleGroupInclusionStackFrame","RSpec/Core/SharedExampleGroupInclusionStackFrame.html#method-i-formatted_inclusion_location","()","<p>@return [String] The {#inclusion_location}, formatted for display by a formatter.\n"],["formatted_load_time","RSpec::Core::Notifications::SummaryNotification","RSpec/Core/Notifications/SummaryNotification.html#method-i-formatted_load_time","()","<p>@return [String] a formatted version of the time it took to boot RSpec\n\n<pre>and load the spec files</pre>\n"],["formatter=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-formatter-3D","(formatter, output=output_wrapper)",""],["formatter_loader","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-formatter_loader","()","<p>@private\n"],["formatters","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-formatters","()","<p>Returns a duplicate of the formatters currently loaded in the `FormatterLoader` for introspection.\n<p>Note …\n"],["formatters","RSpec::Core::Formatters::Loader","RSpec/Core/Formatters/Loader.html#method-c-formatters","()","<p>@api private\n<p>Internal formatters are stored here when loaded.\n"],["framework_name","RSpec::Core::MockingAdapters::Flexmock","RSpec/Core/MockingAdapters/Flexmock.html#method-c-framework_name","()",""],["framework_name","RSpec::Core::MockingAdapters::Mocha","RSpec/Core/MockingAdapters/Mocha.html#method-c-framework_name","()",""],["framework_name","RSpec::Core::MockingAdapters::RR","RSpec/Core/MockingAdapters/RR.html#method-c-framework_name","()",""],["framework_name","RSpec::Core::MockingAdapters::RSpec","RSpec/Core/MockingAdapters/RSpec.html#method-c-framework_name","()",""],["from_hash","RSpec::Core::Notifications::DeprecationNotification","RSpec/Core/Notifications/DeprecationNotification.html#method-c-from_hash","(data)","<p>@api Convenience way to initialize the notification\n"],["full_backtrace=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-full_backtrace-3D","(true_or_false)","<p>Toggle full backtrace. @attr true_or_false [Boolean] toggle full backtrace display\n"],["full_backtrace?","RSpec::Core::BacktraceFormatter","RSpec/Core/BacktraceFormatter.html#method-i-full_backtrace-3F","()",""],["full_backtrace?","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-full_backtrace-3F","()","<p>Check if full backtrace is enabled. @return [Boolean] is full backtrace enabled\n"],["full_description","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-full_description","()","<p>@return [Array] full description filter\n"],["full_description=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-full_description-3D","(description)","<p>Run examples matching on `description` in all files to run. @param description [String, Regexp] the pattern …\n"],["fully_formatted","RSpec::Core::Formatters::ExceptionPresenter","RSpec/Core/Formatters/ExceptionPresenter.html#method-i-fully_formatted","(failure_number, colorizer=::RSpec::Core::Formatters::ConsoleCodes)",""],["fully_formatted","RSpec::Core::Notifications::FailedExampleNotification","RSpec/Core/Notifications/FailedExampleNotification.html#method-i-fully_formatted","(failure_number, colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@return [String] The failure information fully formatted in the way that\n\n<pre>RSpec&#39;s built-in formatters emit.</pre>\n"],["fully_formatted","RSpec::Core::Notifications::SeedNotification","RSpec/Core/Notifications/SeedNotification.html#method-i-fully_formatted","()","<p>@return [String] The seed information fully formatted in the way that\n\n<pre>RSpec&#39;s built-in formatters emit.</pre>\n"],["fully_formatted","RSpec::Core::Notifications::SkippedExampleNotification","RSpec/Core/Notifications/SkippedExampleNotification.html#method-i-fully_formatted","(pending_number, colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@return [String] The pending detail fully formatted in the way that\n\n<pre>RSpec&#39;s built-in formatters emit.</pre>\n"],["fully_formatted","RSpec::Core::Notifications::SummaryNotification","RSpec/Core/Notifications/SummaryNotification.html#method-i-fully_formatted","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@return [String] The summary information fully formatted in the way that\n\n<pre>RSpec&#39;s built-in formatters emit.</pre>\n"],["fully_formatted_failed_examples","RSpec::Core::Notifications::ExamplesNotification","RSpec/Core/Notifications/ExamplesNotification.html#method-i-fully_formatted_failed_examples","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@return [String] The list of failed examples, fully formatted in the way\n\n<pre>that RSpec&#39;s built-in formatters ...</pre>\n"],["fully_formatted_lines","RSpec::Core::Formatters::ExceptionPresenter","RSpec/Core/Formatters/ExceptionPresenter.html#method-i-fully_formatted_lines","(failure_number, colorizer)",""],["fully_formatted_lines","RSpec::Core::Notifications::FailedExampleNotification","RSpec/Core/Notifications/FailedExampleNotification.html#method-i-fully_formatted_lines","(failure_number, colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@return [Array&lt;string&gt;] The failure information fully formatted in the way that\n\n<pre>RSpec&#39;s built-in ...</pre>\n"],["fully_formatted_pending_examples","RSpec::Core::Notifications::ExamplesNotification","RSpec/Core/Notifications/ExamplesNotification.html#method-i-fully_formatted_pending_examples","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@return [String] The list of pending examples, fully formatted in the\n\n<pre>way that RSpec&#39;s built-in formatters ...</pre>\n"],["handle_interrupt","RSpec::Core::Runner","RSpec/Core/Runner.html#method-c-handle_interrupt","()","<p>@private\n"],["hash_attribute_names","RSpec::Core::HashImitatable::ClassMethods","RSpec/Core/HashImitatable/ClassMethods.html#method-i-hash_attribute_names","()",""],["hash_with_backwards_compatibility_default_proc","RSpec::Core::Metadata::ExampleGroupHash","RSpec/Core/Metadata/ExampleGroupHash.html#method-c-hash_with_backwards_compatibility_default_proc","()",""],["highlight","RSpec::Core::Formatters::SyntaxHighlighter","RSpec/Core/Formatters/SyntaxHighlighter.html#method-i-highlight","(lines)",""],["highlight_syntax","RSpec::Core::Formatters::SyntaxHighlighter::CodeRayImplementation","RSpec/Core/Formatters/SyntaxHighlighter/CodeRayImplementation.html#method-c-highlight_syntax","(lines)",""],["highlight_syntax","RSpec::Core::Formatters::SyntaxHighlighter::NoSyntaxHighlightingImplementation","RSpec/Core/Formatters/SyntaxHighlighter/NoSyntaxHighlightingImplementation.html#method-c-highlight_syntax","(lines)",""],["highlight_syntax","RSpec::Core::Formatters::SyntaxHighlighter::NoSyntaxHighlightingImplementation","RSpec/Core/Formatters/SyntaxHighlighter/NoSyntaxHighlightingImplementation.html#method-c-highlight_syntax","(lines)",""],["hook_description","RSpec::Core::Hooks::AroundHook","RSpec/Core/Hooks/AroundHook.html#method-i-hook_description","()",""],["hook_expression","RSpec::Core::MemoizedHelpers::ContextHookMemoized::After","RSpec/Core/MemoizedHelpers/ContextHookMemoized/After.html#method-c-hook_expression","()",""],["hook_expression","RSpec::Core::MemoizedHelpers::ContextHookMemoized::Before","RSpec/Core/MemoizedHelpers/ContextHookMemoized/Before.html#method-c-hook_expression","()",""],["hook_intention","RSpec::Core::MemoizedHelpers::ContextHookMemoized::After","RSpec/Core/MemoizedHelpers/ContextHookMemoized/After.html#method-c-hook_intention","()",""],["hook_intention","RSpec::Core::MemoizedHelpers::ContextHookMemoized::Before","RSpec/Core/MemoizedHelpers/ContextHookMemoized/Before.html#method-c-hook_intention","()",""],["hooks","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-hooks","()","<p>@private Holds the various registered hooks. Here we use a FilterableItemRepository implementation that …\n"],["hooks","RSpec::Core::Hooks","RSpec/Core/Hooks.html#method-i-hooks","()","<p>@private Holds the various registered hooks.\n"],["id","RSpec::Core::Example","RSpec/Core/Example.html#method-i-id","()","<p>@return [String] the unique id of this example. Pass\n\n<pre>this at the command line to re-run this exact example.</pre>\n"],["id","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-id","()","<p>@return [String] the unique id of this example group. Pass\n\n<pre>this at the command line to re-run this exact ...</pre>\n"],["id_from","RSpec::Core::Metadata","RSpec/Core/Metadata.html#method-c-id_from","(metadata)","<p>@private\n"],["idempotently_define_singleton_method","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-idempotently_define_singleton_method","(name, &definition)","<p>Define a singleton method for the singleton class (remove the method if it&#39;s already been defined). …\n"],["in_project_source_dir_regex","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-in_project_source_dir_regex","()","<p>@private\n"],["include","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-include","(mod, *filters)","<p>Tells RSpec to include `mod` in example groups. Methods defined in `mod` are exposed to examples (not …\n"],["include","RSpec::Core::FilterManager","RSpec/Core/FilterManager.html#method-i-include","(*args)",""],["include?","RSpec::Core::Set","RSpec/Core/Set.html#method-i-include-3F","(key)",""],["include_context","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-include_context","(shared_group_name, *filters)","<p>Tells RSpec to include the named shared example group in example groups. Use `filters` to constrain the …\n"],["include_context","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-include_context","(name, *args, &block)","<p>Includes shared content mapped to `name` directly in the group in which it is declared, as opposed to …\n"],["include_example?","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-include_example-3F","(example)",""],["include_example?","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-include_example-3F","(example)",""],["include_example?","RSpec::Core::InclusionRules","RSpec/Core/InclusionRules.html#method-i-include_example-3F","(example)",""],["include_examples","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-include_examples","(name, *args, &block)","<p>Includes shared content mapped to `name` directly in the group in which it is declared, as opposed to …\n"],["include_in","RSpec::Core::SharedExampleGroupModule","RSpec/Core/SharedExampleGroupModule.html#method-i-include_in","(klass, inclusion_line, args, customization_block)","<p>@private\n"],["include_only","RSpec::Core::FilterManager","RSpec/Core/FilterManager.html#method-i-include_only","(*args)",""],["include_with_low_priority","RSpec::Core::FilterManager","RSpec/Core/FilterManager.html#method-i-include_with_low_priority","(*args)",""],["included","RSpec::Core::HashImitatable","RSpec/Core/HashImitatable.html#method-c-included","(klass)",""],["included","RSpec::Core::SharedContext","RSpec/Core/SharedContext.html#method-i-included","(group)","<p>@private\n"],["included","RSpec::Core::SharedExampleGroupModule","RSpec/Core/SharedExampleGroupModule.html#method-i-included","(klass)","<p>Ruby callback for when a module is included in another module is class. Our definition evaluates the …\n"],["inclusion_filter","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-inclusion_filter","()","<p>Returns the `inclusion_filter`. If none has been set, returns an empty hash.\n"],["inclusion_filter","RSpec::Core::World","RSpec/Core/World.html#method-i-inclusion_filter","()","<p>@private\n"],["inclusion_filter=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-inclusion_filter-3D","(filter)","<p>Clears and reassigns the `inclusion_filter`. Set to `nil` if you don&#39;t want any inclusion filter …\n"],["inherited","RSpec::Core::Formatters::BaseBisectFormatter","RSpec/Core/Formatters/BaseBisectFormatter.html#method-c-inherited","(formatter)",""],["inspect","RSpec::Core::Example","RSpec/Core/Example.html#method-i-inspect","()","<p>Provide a human-readable representation of this class\n"],["inspect","RSpec::Core::Example::Procsy","RSpec/Core/Example/Procsy.html#method-i-inspect","()","<p>@private\n"],["inspect","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-i-inspect","()","<p>@private\n"],["inspect","RSpec::Core::SharedExampleGroupModule","RSpec/Core/SharedExampleGroupModule.html#method-i-inspect","()","<p>Provides a human-readable representation of this module.\n"],["inspect_output","RSpec::Core::Example","RSpec/Core/Example.html#method-i-inspect_output","()","<p>Returns a description of the example that always includes the location.\n"],["installed_at_exit?","RSpec::Core::Runner","RSpec/Core/Runner.html#method-c-installed_at_exit-3F","()","<p>@private\n"],["instance_exec","RSpec::Core::Example","RSpec/Core/Example.html#method-i-instance_exec","(*args, &block)","<p>@private\n"],["invoke","RSpec::Core::Runner","RSpec/Core/Runner.html#method-c-invoke","()","<p>Runs the suite of specs and exits the process with an appropriate exit code.\n"],["is_expected","RSpec::Core::MemoizedHelpers","RSpec/Core/MemoizedHelpers.html#method-i-is_expected","()","<p>Wraps the `subject` in `expect` to make it the target of an expectation. Designed to read nicely for …\n"],["isolate_for_context_hook","RSpec::Core::MemoizedHelpers::ContextHookMemoized","RSpec/Core/MemoizedHelpers/ContextHookMemoized.html#method-c-isolate_for_context_hook","(example_group_instance)",""],["items_for","RSpec::Core::FilterableItemRepository::QueryOptimized","RSpec/Core/FilterableItemRepository/QueryOptimized.html#method-i-items_for","(metadata)",""],["items_for","RSpec::Core::FilterableItemRepository::UpdateOptimized","RSpec/Core/FilterableItemRepository/UpdateOptimized.html#method-i-items_for","(request_meta)",""],["last_run_statuses","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-last_run_statuses","()","<p>@private\n"],["least_indentation_from","RSpec::Core::Formatters::SnippetExtractor","RSpec/Core/Formatters/SnippetExtractor.html#method-c-least_indentation_from","(lines)",""],["let","RSpec::Core::MemoizedHelpers::ClassMethods","RSpec/Core/MemoizedHelpers/ClassMethods.html#method-i-let","(name, &block)","<p>Generates a method whose return value is memoized after the first call. Useful for reducing duplication …\n"],["let!","RSpec::Core::MemoizedHelpers::ClassMethods","RSpec/Core/MemoizedHelpers/ClassMethods.html#method-i-let-21","(name, &block)","<p>Just like `let`, except the block is invoked by an implicit `before` hook. This serves a dual purpose …\n"],["libs=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-libs-3D","(libs)","<p>@private\n"],["line_range_of_expression","RSpec::Core::Formatters::SnippetExtractor","RSpec/Core/Formatters/SnippetExtractor.html#method-i-line_range_of_expression","()",""],["line_range_of_location_nodes_in_expression","RSpec::Core::Formatters::SnippetExtractor","RSpec/Core/Formatters/SnippetExtractor.html#method-i-line_range_of_location_nodes_in_expression","()",""],["lines_around","RSpec::Core::Formatters::HtmlSnippetExtractor","RSpec/Core/Formatters/HtmlSnippetExtractor.html#method-i-lines_around","(file, line)","<p>@api private\n<p>Extract lines of code centered around a particular line within a source file.\n<p>@param file …\n"],["load_from","RSpec::Core::ExampleStatusPersister","RSpec/Core/ExampleStatusPersister.html#method-c-load_from","(file_name)",""],["load_spec_files","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-load_spec_files","()","<p>@private\n"],["location_nodes_at_beginning_line","RSpec::Core::Formatters::SnippetExtractor","RSpec/Core/Formatters/SnippetExtractor.html#method-i-location_nodes_at_beginning_line","()",""],["location_rerun_argument","RSpec::Core::Example","RSpec/Core/Example.html#method-i-location_rerun_argument","()","<p>Returns the location-based argument that can be passed to the `rspec` command to rerun this example. …\n"],["location_tuple_from","RSpec::Core::Metadata","RSpec/Core/Metadata.html#method-c-location_tuple_from","(metadata)","<p>@private\n"],["make_example_group_header_red","RSpec::Core::Formatters::HtmlPrinter","RSpec/Core/Formatters/HtmlPrinter.html#method-i-make_example_group_header_red","(group_id)",""],["make_example_group_header_yellow","RSpec::Core::Formatters::HtmlPrinter","RSpec/Core/Formatters/HtmlPrinter.html#method-i-make_example_group_header_yellow","(group_id)",""],["make_header_red","RSpec::Core::Formatters::HtmlPrinter","RSpec/Core/Formatters/HtmlPrinter.html#method-i-make_header_red","()",""],["make_header_yellow","RSpec::Core::Formatters::HtmlPrinter","RSpec/Core/Formatters/HtmlPrinter.html#method-i-make_header_yellow","()",""],["mark_fixed!","RSpec::Core::Pending","RSpec/Core/Pending.html#method-c-mark_fixed-21","(example)","<p>@private\n<p>Mark example as fixed.\n<p>@param example [RSpec::Core::Example] the example to mark as fixed\n"],["mark_pending!","RSpec::Core::Pending","RSpec/Core/Pending.html#method-c-mark_pending-21","(example, message_or_bool)","<p>@private\n<p>Mark example as pending.\n<p>@param example [RSpec::Core::Example] the example to mark as pending …\n"],["mark_skipped!","RSpec::Core::Pending","RSpec/Core/Pending.html#method-c-mark_skipped-21","(example, message_or_bool)","<p>@private\n<p>Mark example as skipped.\n<p>@param example [RSpec::Core::Example] the example to mark as skipped …\n"],["matching_hooks_for","RSpec::Core::Hooks::HookCollections","RSpec/Core/Hooks/HookCollections.html#method-i-matching_hooks_for","(position, scope, example_or_group)",""],["merge","RSpec::Core::ExampleStatusMerger","RSpec/Core/ExampleStatusMerger.html#method-i-merge","()",""],["merge","RSpec::Core::ExampleStatusMerger","RSpec/Core/ExampleStatusMerger.html#method-c-merge","(this_run, from_previous_runs)",""],["merge","RSpec::Core::Set","RSpec/Core/Set.html#method-i-merge","(values)",""],["message","RSpec::Core::Formatters::BaseTextFormatter","RSpec/Core/Formatters/BaseTextFormatter.html#method-i-message","(notification)","<p>@api public\n<p>Used by the reporter to send messages to the output stream.\n<p>@param notification [MessageNotification] …\n"],["message","RSpec::Core::Formatters::DocumentationFormatter","RSpec/Core/Formatters/DocumentationFormatter.html#method-i-message","(notification)",""],["message","RSpec::Core::Formatters::FailureListFormatter","RSpec/Core/Formatters/FailureListFormatter.html#method-i-message","(_message)",""],["message","RSpec::Core::Formatters::FallbackMessageFormatter","RSpec/Core/Formatters/FallbackMessageFormatter.html#method-i-message","(notification)","<p>@api public\n<p>Used by the reporter to send messages to the output stream.\n<p>@param notification [MessageNotification] …\n"],["message","RSpec::Core::Formatters::JsonFormatter","RSpec/Core/Formatters/JsonFormatter.html#method-i-message","(notification)",""],["message","RSpec::Core::MultipleExceptionError","RSpec/Core/MultipleExceptionError.html#method-i-message","()","<p>@return [String] Combines all the exception messages into a single string. @note RSpec does not actually …\n"],["message","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-message","(message)","<p>@param message [#to_s] A message object to send to formatters\n<p>Send a custom message to supporting formatters. …\n"],["message_lines","RSpec::Core::Formatters::ExceptionPresenter","RSpec/Core/Formatters/ExceptionPresenter.html#method-i-message_lines","()",""],["message_lines","RSpec::Core::Notifications::FailedExampleNotification","RSpec/Core/Notifications/FailedExampleNotification.html#method-i-message_lines","()","<p>Returns the message generated for this failure line by line.\n<p>@return [Array&lt;String&gt;] The example …\n"],["metadata","RSpec::Core::AnonymousExampleGroup","RSpec/Core/AnonymousExampleGroup.html#method-c-metadata","()",""],["metadata","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-metadata","()","<p>The [Metadata](Metadata) object associated with this group. @see Metadata\n"],["method_missing","RSpec::Core::OutputWrapper","RSpec/Core/OutputWrapper.html#method-i-method_missing","(name, *args, &block)",""],["mock_framework","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-mock_framework","()","<p>Returns the configured mock framework adapter module. @return [Symbol]\n"],["mock_framework=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-mock_framework-3D","(framework)","<p>Delegates to mock_framework=(framework).\n"],["mock_with","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-mock_with","(framework)","<p>Sets the mock framework adapter module.\n<p>`framework` can be a Symbol or a Module.\n<p>Given any of `:rspec`, …\n"],["move_progress","RSpec::Core::Formatters::HtmlPrinter","RSpec/Core/Formatters/HtmlPrinter.html#method-i-move_progress","(percent_done)",""],["name","RSpec::Core::Bisect::ForkRunner","RSpec/Core/Bisect/ForkRunner.html#method-c-name","()",""],["name","RSpec::Core::Bisect::ShellRunner","RSpec/Core/Bisect/ShellRunner.html#method-c-name","()",""],["new","RSpec::Core::BacktraceFormatter","RSpec/Core/BacktraceFormatter.html#method-c-new","()",""],["new","RSpec::Core::Bisect::Channel","RSpec/Core/Bisect/Channel.html#method-c-new","()",""],["new","RSpec::Core::Bisect::Coordinator","RSpec/Core/Bisect/Coordinator.html#method-c-new","(spec_runner, original_cli_args, formatter)",""],["new","RSpec::Core::Bisect::ExampleMinimizer","RSpec/Core/Bisect/ExampleMinimizer.html#method-c-new","(shell_command, runner, notifier)",""],["new","RSpec::Core::Bisect::ForkRunner","RSpec/Core/Bisect/ForkRunner.html#method-c-new","(shell_command, spec_runner)",""],["new","RSpec::Core::Bisect::ForkRunner::RunDispatcher","RSpec/Core/Bisect/ForkRunner/RunDispatcher.html#method-c-new","(runner, channel)",""],["new","RSpec::Core::Bisect::Notifier","RSpec/Core/Bisect/Notifier.html#method-c-new","(formatter)",""],["new","RSpec::Core::Bisect::ShellCommand","RSpec/Core/Bisect/ShellCommand.html#method-c-new","(original_cli_args)",""],["new","RSpec::Core::Bisect::ShellRunner","RSpec/Core/Bisect/ShellRunner.html#method-c-new","(server, shell_command)",""],["new","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-c-new","()","<p>Build an object to store runtime configuration options and set defaults\n"],["new","RSpec::Core::Configuration::DeprecationReporterBuffer","RSpec/Core/Configuration/DeprecationReporterBuffer.html#method-c-new","()",""],["new","RSpec::Core::ConfigurationOptions","RSpec/Core/ConfigurationOptions.html#method-c-new","(args)","<p>@param args [Array&lt;String&gt;] command line arguments\n"],["new","RSpec::Core::DRbOptions","RSpec/Core/DRbOptions.html#method-c-new","(submitted_options, filter_manager)",""],["new","RSpec::Core::DRbRunner","RSpec/Core/DRbRunner.html#method-c-new","(options, configuration=RSpec.configuration)",""],["new","RSpec::Core::DidYouMean","RSpec/Core/DidYouMean.html#method-c-new","(relative_file_name)",""],["new","RSpec::Core::Example","RSpec/Core/Example.html#method-c-new","(example_group_class, description, user_metadata, example_block=nil)","<p>Creates a new instance of Example. @param example_group_class [Class] the subclass of ExampleGroup in …\n"],["new","RSpec::Core::Example::Procsy","RSpec/Core/Example/Procsy.html#method-c-new","(example, &block)",""],["new","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-new","(inspect_output=nil)",""],["new","RSpec::Core::ExampleStatusDumper","RSpec/Core/ExampleStatusDumper.html#method-c-new","(examples)",""],["new","RSpec::Core::ExampleStatusMerger","RSpec/Core/ExampleStatusMerger.html#method-c-new","(this_run, from_previous_runs)",""],["new","RSpec::Core::ExampleStatusParser","RSpec/Core/ExampleStatusParser.html#method-c-new","(string)",""],["new","RSpec::Core::ExampleStatusPersister","RSpec/Core/ExampleStatusPersister.html#method-c-new","(examples, file_name)",""],["new","RSpec::Core::FilterManager","RSpec/Core/FilterManager.html#method-c-new","()",""],["new","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-c-new","(rules={})",""],["new","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-c-new","(rules={})",""],["new","RSpec::Core::FilterableItemRepository::QueryOptimized","RSpec/Core/FilterableItemRepository/QueryOptimized.html#method-c-new","(applies_predicate)",""],["new","RSpec::Core::FilterableItemRepository::UpdateOptimized","RSpec/Core/FilterableItemRepository/UpdateOptimized.html#method-c-new","(applies_predicate)",""],["new","RSpec::Core::Formatters::BaseBisectFormatter","RSpec/Core/Formatters/BaseBisectFormatter.html#method-c-new","(expected_failures)",""],["new","RSpec::Core::Formatters::BaseFormatter","RSpec/Core/Formatters/BaseFormatter.html#method-c-new","(output)","<p>@api public @param output [IO] the formatter output @see RSpec::Core::Formatters::Protocol#initialize …\n"],["new","RSpec::Core::Formatters::BisectDRbFormatter","RSpec/Core/Formatters/BisectDRbFormatter.html#method-c-new","(_output)",""],["new","RSpec::Core::Formatters::BisectProgressFormatter","RSpec/Core/Formatters/BisectProgressFormatter.html#method-c-new","(output, bisect_runner)",""],["new","RSpec::Core::Formatters::DeprecationFormatter","RSpec/Core/Formatters/DeprecationFormatter.html#method-c-new","(deprecation_stream, summary_stream)",""],["new","RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter","RSpec/Core/Formatters/DeprecationFormatter/DelayedPrinter.html#method-c-new","(deprecation_stream, summary_stream, deprecation_formatter)",""],["new","RSpec::Core::Formatters::DeprecationFormatter::FileStream","RSpec/Core/Formatters/DeprecationFormatter/FileStream.html#method-c-new","(file)",""],["new","RSpec::Core::Formatters::DeprecationFormatter::ImmediatePrinter","RSpec/Core/Formatters/DeprecationFormatter/ImmediatePrinter.html#method-c-new","(deprecation_stream, summary_stream, deprecation_formatter)",""],["new","RSpec::Core::Formatters::DocumentationFormatter","RSpec/Core/Formatters/DocumentationFormatter.html#method-c-new","(output)",""],["new","RSpec::Core::Formatters::ExceptionPresenter","RSpec/Core/Formatters/ExceptionPresenter.html#method-c-new","(exception, example, options={})",""],["new","RSpec::Core::Formatters::ExceptionPresenter::Factory","RSpec/Core/Formatters/ExceptionPresenter/Factory.html#method-c-new","(example)",""],["new","RSpec::Core::Formatters::ExceptionPresenter::Factory::CommonBacktraceTruncater","RSpec/Core/Formatters/ExceptionPresenter/Factory/CommonBacktraceTruncater.html#method-c-new","(parent)",""],["new","RSpec::Core::Formatters::FallbackMessageFormatter","RSpec/Core/Formatters/FallbackMessageFormatter.html#method-c-new","(output)",""],["new","RSpec::Core::Formatters::HtmlFormatter","RSpec/Core/Formatters/HtmlFormatter.html#method-c-new","(output)",""],["new","RSpec::Core::Formatters::HtmlPrinter","RSpec/Core/Formatters/HtmlPrinter.html#method-c-new","(output)",""],["new","RSpec::Core::Formatters::JsonFormatter","RSpec/Core/Formatters/JsonFormatter.html#method-c-new","(output)",""],["new","RSpec::Core::Formatters::Loader","RSpec/Core/Formatters/Loader.html#method-c-new","(reporter)","<p>@api private\n"],["new","RSpec::Core::Formatters::ProfileFormatter","RSpec/Core/Formatters/ProfileFormatter.html#method-c-new","(output)",""],["new","RSpec::Core::Formatters::SnippetExtractor","RSpec/Core/Formatters/SnippetExtractor.html#method-c-new","(source, beginning_line_number, max_line_count=nil)",""],["new","RSpec::Core::Formatters::SyntaxHighlighter","RSpec/Core/Formatters/SyntaxHighlighter.html#method-c-new","(configuration)",""],["new","RSpec::Core::Hooks::HookCollections","RSpec/Core/Hooks/HookCollections.html#method-c-new","(owner, filterable_item_repo_class)",""],["new","RSpec::Core::LegacyExampleGroupHash","RSpec/Core/LegacyExampleGroupHash.html#method-c-new","(metadata)",""],["new","RSpec::Core::MemoizedHelpers","RSpec/Core/MemoizedHelpers.html#method-c-new","(*)","<p>@private\n"],["new","RSpec::Core::MemoizedHelpers::NonThreadSafeMemoized","RSpec/Core/MemoizedHelpers/NonThreadSafeMemoized.html#method-c-new","()",""],["new","RSpec::Core::MemoizedHelpers::ThreadsafeMemoized","RSpec/Core/MemoizedHelpers/ThreadsafeMemoized.html#method-c-new","()",""],["new","RSpec::Core::Metadata::HashPopulator","RSpec/Core/Metadata/HashPopulator.html#method-c-new","(metadata, user_metadata, index_provider, description_args, block)",""],["new","RSpec::Core::MultipleExceptionError","RSpec/Core/MultipleExceptionError.html#method-c-new","(*exceptions)","<p>@param exceptions [Array&lt;Exception&gt;] The initial list of exceptions.\n"],["new","RSpec::Core::Notifications::ExamplesNotification","RSpec/Core/Notifications/ExamplesNotification.html#method-c-new","(reporter)",""],["new","RSpec::Core::Notifications::FailedExampleNotification","RSpec/Core/Notifications/FailedExampleNotification.html#method-c-new","(example, exception_presenter=Formatters::ExceptionPresenter::Factory.new(example).build)",""],["new","RSpec::Core::Notifications::ProfileNotification","RSpec/Core/Notifications/ProfileNotification.html#method-c-new","(duration, examples, number_of_examples, example_groups)",""],["new","RSpec::Core::Ordering::ConfigurationManager","RSpec/Core/Ordering/ConfigurationManager.html#method-c-new","()",""],["new","RSpec::Core::Ordering::Custom","RSpec/Core/Ordering/Custom.html#method-c-new","(callable)",""],["new","RSpec::Core::Ordering::Random","RSpec/Core/Ordering/Random.html#method-c-new","(configuration)",""],["new","RSpec::Core::Ordering::Registry","RSpec/Core/Ordering/Registry.html#method-c-new","(configuration)",""],["new","RSpec::Core::OutputWrapper","RSpec/Core/OutputWrapper.html#method-c-new","(output)","<p>@private\n"],["new","RSpec::Core::Parser","RSpec/Core/Parser.html#method-c-new","(original_args)",""],["new","RSpec::Core::Pending::SkipDeclaredInExample","RSpec/Core/Pending/SkipDeclaredInExample.html#method-c-new","(argument)",""],["new","RSpec::Core::Profiler","RSpec/Core/Profiler.html#method-c-new","()",""],["new","RSpec::Core::ProjectInitializer","RSpec/Core/ProjectInitializer.html#method-c-new","(opts={})",""],["new","RSpec::Core::RakeTask","RSpec/Core/RakeTask.html#method-c-new","(*args, &task_block)",""],["new","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-c-new","(configuration)",""],["new","RSpec::Core::Runner","RSpec/Core/Runner.html#method-c-new","(options, configuration=RSpec.configuration, world=RSpec.world)",""],["new","RSpec::Core::Set","RSpec/Core/Set.html#method-c-new","(array=[])",""],["new","RSpec::Core::SharedExampleGroupInclusionStackFrame","RSpec/Core/SharedExampleGroupInclusionStackFrame.html#method-c-new","(shared_group_name, inclusion_location)",""],["new","RSpec::Core::SharedExampleGroupModule","RSpec/Core/SharedExampleGroupModule.html#method-c-new","(description, definition, metadata)",""],["new","RSpec::Core::SuiteHookContext","RSpec/Core/SuiteHookContext.html#method-c-new","(hook_description, reporter)",""],["new","RSpec::Core::World","RSpec/Core/World.html#method-c-new","(configuration=RSpec.configuration)",""],["next_runnable_index_for","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-next_runnable_index_for","(file)","<p>@private\n"],["non_example_failure","RSpec::Core::World::Null","RSpec/Core/World/Null.html#method-c-non_example_failure","()",""],["non_example_failure=","RSpec::Core::World::Null","RSpec/Core/World/Null.html#method-c-non_example_failure-3D","(_)",""],["notifications","RSpec::Core::Notifications::ExamplesNotification","RSpec/Core/Notifications/ExamplesNotification.html#method-i-notifications","()","<p>@return [Array&lt;RSpec::Core::Notifications::ExampleNotification&gt;]\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">returns</span> <span class=\"ruby-identifier\">examples</span> <span class=\"ruby-identifier\">as</span> <span class=\"ruby-identifier\">notifications</span>\n</pre>\n"],["notify","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-notify","(event, notification)","<p>@private\n"],["notify_non_example_exception","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-notify_non_example_exception","(exception, context_description)","<p>@private Provides a way to notify of an exception that is not tied to any particular example (such as …\n"],["notify_results","RSpec::Core::Formatters::BisectDRbFormatter","RSpec/Core/Formatters/BisectDRbFormatter.html#method-i-notify_results","(results)",""],["num_example_groups_defined_in","RSpec::Core::World","RSpec/Core/World.html#method-i-num_example_groups_defined_in","(file)","<p>@private\n"],["on_example_group_definition","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-on_example_group_definition","(&block)","<p>Invokes block before defining an example group\n"],["on_example_group_definition_callbacks","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-on_example_group_definition_callbacks","()","<p>@api private Returns an array of blocks to call before defining an example group\n"],["only_failures_but_not_configured?","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-only_failures_but_not_configured-3F","()","<p>@private\n"],["options","RSpec::Core::DRbOptions","RSpec/Core/DRbOptions.html#method-i-options","()",""],["order","RSpec::Core::Ordering::Custom","RSpec/Core/Ordering/Custom.html#method-i-order","(list)",""],["order","RSpec::Core::Ordering::Identity","RSpec/Core/Ordering/Identity.html#method-i-order","(items)",""],["order","RSpec::Core::Ordering::Random","RSpec/Core/Ordering/Random.html#method-i-order","(items)",""],["order=","RSpec::Core::Ordering::ConfigurationManager","RSpec/Core/Ordering/ConfigurationManager.html#method-i-order-3D","(type)",""],["ordered_example_groups","RSpec::Core::World","RSpec/Core/World.html#method-i-ordered_example_groups","()","<p>@api private\n<p>Apply ordering strategy from configuration to example groups.\n"],["ordering_strategy","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-ordering_strategy","()","<p>@private\n"],["organize_ids","RSpec::Core::Formatters::Helpers","RSpec/Core/Formatters/Helpers.html#method-c-organize_ids","(ids)","<p>@api private Given a list of example ids, organizes them into a compact, ordered list.\n"],["original_locations","RSpec::Core::Bisect::ShellCommand","RSpec/Core/Bisect/ShellCommand.html#method-i-original_locations","()",""],["original_results","RSpec::Core::Bisect::ForkRunner","RSpec/Core/Bisect/ForkRunner.html#method-i-original_results","()",""],["original_results","RSpec::Core::Bisect::ShellRunner","RSpec/Core/Bisect/ShellRunner.html#method-i-original_results","()",""],["output_stream=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-output_stream-3D","(value)","<p>Set the output stream for reporter. @attr value [IO, String] IO to write to or filename to write to, …\n"],["parent_groups","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-parent_groups","()","<p>@private\n"],["parse","RSpec::Core::ExampleStatusParser","RSpec/Core/ExampleStatusParser.html#method-c-parse","(string)",""],["parse","RSpec::Core::ExampleStatusParser","RSpec/Core/ExampleStatusParser.html#method-i-parse","()",""],["parse","RSpec::Core::Parser","RSpec/Core/Parser.html#method-i-parse","(source=nil)",""],["parse","RSpec::Core::Parser","RSpec/Core/Parser.html#method-c-parse","(args, source=nil)",""],["parse_id","RSpec::Core::Example","RSpec/Core/Example.html#method-c-parse_id","(id)","<p>@private\n"],["path_to_executable","RSpec::Core","RSpec/Core.html#method-c-path_to_executable","()","<p>@private path to executable file.\n"],["pattern=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-pattern-3D","(value)","<p>Set pattern to match files to load. @attr value [String] the filename pattern to filter spec files by …\n"],["pending","RSpec::Core::Pending","RSpec/Core/Pending.html#method-i-pending","(message=nil)","<p>@overload pending() @overload pending(message)\n<p>Marks an example as pending. The rest of the example will …\n"],["pending_count","RSpec::Core::Notifications::SummaryNotification","RSpec/Core/Notifications/SummaryNotification.html#method-i-pending_count","()","<p>@api @return [Fixnum] the number of pending examples\n"],["pending_examples","RSpec::Core::Notifications::ExamplesNotification","RSpec/Core/Notifications/ExamplesNotification.html#method-i-pending_examples","()","<p>@return [Array&lt;RSpec::Core::Example&gt;] list of pending examples\n"],["pending_notifications","RSpec::Core::Notifications::ExamplesNotification","RSpec/Core/Notifications/ExamplesNotification.html#method-i-pending_notifications","()","<p>@return [Array&lt;RSpec::Core::Notifications::SkippedExampleNotification,\n\n<pre>        RSpec::Core::Notifications::PendingExampleFailedAsExpectedNotification&gt;] ...</pre>\n"],["percentage","RSpec::Core::Notifications::ProfileNotification","RSpec/Core/Notifications/ProfileNotification.html#method-i-percentage","()","<p>@return [String] the percentage of total time taken\n"],["perform_at_exit","RSpec::Core::Runner","RSpec/Core/Runner.html#method-c-perform_at_exit","()","<p>@private\n"],["persist","RSpec::Core::ExampleStatusPersister","RSpec/Core/ExampleStatusPersister.html#method-c-persist","(examples, file_name)",""],["persist","RSpec::Core::ExampleStatusPersister","RSpec/Core/ExampleStatusPersister.html#method-i-persist","()",""],["play_onto","RSpec::Core::Configuration::DeprecationReporterBuffer","RSpec/Core/Configuration/DeprecationReporterBuffer.html#method-i-play_onto","(reporter)",""],["pluralize","RSpec::Core::Formatters::Helpers","RSpec/Core/Formatters/Helpers.html#method-c-pluralize","(count, string)","<p>@api private\n<p>Pluralize a word based on a count.\n<p>@param count [Fixnum] number of objects @param string [String] …\n"],["populate","RSpec::Core::Metadata::HashPopulator","RSpec/Core/Metadata/HashPopulator.html#method-i-populate","()",""],["post_process","RSpec::Core::Formatters::HtmlSnippetExtractor","RSpec/Core/Formatters/HtmlSnippetExtractor.html#method-i-post_process","(highlighted, offending_line)","<p>@api private\n<p>Adds line numbers to all lines and highlights the line where the failure occurred using html …\n"],["preceding_declaration_line","RSpec::Core::World","RSpec/Core/World.html#method-i-preceding_declaration_line","(absolute_file_name, filter_line)","<p>@api private\n<p>Find line number of previous declaration.\n"],["prepare_default","RSpec::Core::Formatters::Loader","RSpec/Core/Formatters/Loader.html#method-i-prepare_default","(output_stream, deprecation_stream)","<p>@private\n"],["prepare_default","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-prepare_default","(loader, output_stream, deprecation_stream)","<p>@private\n"],["prepare_example_filtering","RSpec::Core::World","RSpec/Core/World.html#method-i-prepare_example_filtering","()","<p>@api public\n<p>Prepares filters so that they apply to example groups when they run.\n<p>This is a separate method …\n"],["prepend","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-prepend","(mod, *filters)","<p>Tells RSpec to prepend example groups with `mod`. Methods defined in `mod` are exposed to examples (not …\n"],["prepend","RSpec::Core::FilterableItemRepository::QueryOptimized","RSpec/Core/FilterableItemRepository/QueryOptimized.html#method-i-prepend","(item, metadata)",""],["prepend","RSpec::Core::FilterableItemRepository::UpdateOptimized","RSpec/Core/FilterableItemRepository/UpdateOptimized.html#method-i-prepend","(item, metadata)",""],["prepend_after","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-prepend_after","(scope=nil, *meta, &block)",""],["prepend_after","RSpec::Core::Hooks","RSpec/Core/Hooks.html#method-i-prepend_after","(*args, &block)",""],["prepend_before","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-prepend_before","(scope=nil, *meta, &block)","<p>Adds `block` to the start of the list of `before` blocks in the same scope (`:example`, `:context`, or …\n"],["prepend_before","RSpec::Core::Hooks","RSpec/Core/Hooks.html#method-i-prepend_before","(*args, &block)","<p>Adds `block` to the front of the list of `before` blocks in the same scope (`:example`, `:context`, or …\n"],["print_deferred_deprecation_warnings","RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter","RSpec/Core/Formatters/DeprecationFormatter/DelayedPrinter.html#method-i-print_deferred_deprecation_warnings","()",""],["print_deprecation_message","RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter","RSpec/Core/Formatters/DeprecationFormatter/DelayedPrinter.html#method-i-print_deprecation_message","(data)",""],["print_deprecation_message","RSpec::Core::Formatters::DeprecationFormatter::ImmediatePrinter","RSpec/Core/Formatters/DeprecationFormatter/ImmediatePrinter.html#method-i-print_deprecation_message","(data)",""],["print_example_failed","RSpec::Core::Formatters::HtmlPrinter","RSpec/Core/Formatters/HtmlPrinter.html#method-i-print_example_failed","(pending_fixed, description, run_time, failure_id, exception, extra_content)","<p>rubocop:disable Metrics/ParameterLists\n"],["print_example_group_end","RSpec::Core::Formatters::HtmlPrinter","RSpec/Core/Formatters/HtmlPrinter.html#method-i-print_example_group_end","()",""],["print_example_group_start","RSpec::Core::Formatters::HtmlPrinter","RSpec/Core/Formatters/HtmlPrinter.html#method-i-print_example_group_start","(group_id, description, number_of_parents)",""],["print_example_passed","RSpec::Core::Formatters::HtmlPrinter","RSpec/Core/Formatters/HtmlPrinter.html#method-i-print_example_passed","(description, run_time)",""],["print_example_pending","RSpec::Core::Formatters::HtmlPrinter","RSpec/Core/Formatters/HtmlPrinter.html#method-i-print_example_pending","(description, pending_message)",""],["print_html_start","RSpec::Core::Formatters::HtmlPrinter","RSpec/Core/Formatters/HtmlPrinter.html#method-i-print_html_start","()",""],["print_summary","RSpec::Core::Formatters::HtmlPrinter","RSpec/Core/Formatters/HtmlPrinter.html#method-i-print_summary","(duration, example_count, failure_count, pending_count)",""],["printer","RSpec::Core::Formatters::DeprecationFormatter","RSpec/Core/Formatters/DeprecationFormatter.html#method-i-printer","()",""],["processable_hooks_for","RSpec::Core::Hooks::HookCollections","RSpec/Core/Hooks/HookCollections.html#method-i-processable_hooks_for","(position, scope, host)",""],["profile_examples","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-profile_examples","()","<p>@api private\n<p>Defaults `profile_examples` to 10 examples when `@profile_examples` is `true`.\n"],["prune","RSpec::Core::FilterManager","RSpec/Core/FilterManager.html#method-i-prune","(examples)",""],["publish","RSpec::Core::Bisect::Notifier","RSpec/Core/Bisect/Notifier.html#method-i-publish","(event, *args)",""],["publish","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-publish","(event, options={})","<p>@param event [Symbol] Name of the custom event to trigger on formatters @param options [Hash] Hash of …\n"],["puts","RSpec::Core::Formatters::DeprecationFormatter::FileStream","RSpec/Core/Formatters/DeprecationFormatter/FileStream.html#method-i-puts","(*args)",""],["puts","RSpec::Core::Formatters::DeprecationFormatter::RaiseErrorStream","RSpec/Core/Formatters/DeprecationFormatter/RaiseErrorStream.html#method-i-puts","(message)",""],["quote","RSpec::Core::ShellEscape","RSpec/Core/ShellEscape.html#method-i-quote","(argument)",""],["raise_errors_for_deprecations!","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-raise_errors_for_deprecations-21","()","<p>Turns deprecation warnings into errors, in order to surface the full backtrace of the call site. This …\n"],["raise_on_warning=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-raise_on_warning-3D","(value)","<p>Turns warnings into errors. This can be useful when you want RSpec to run in a &#39;strict&#39; no warning …\n"],["receive","RSpec::Core::Bisect::Channel","RSpec/Core/Bisect/Channel.html#method-i-receive","()","<p>rubocop:disable Security/MarshalLoad\n"],["record","RSpec::Core::SharedContext","RSpec/Core/SharedContext.html#method-c-record","(methods)","<p>@private\n"],["record","RSpec::Core::World","RSpec/Core/World.html#method-i-record","(example_group)","<p>@api private\n<p>Records an example group.\n"],["record_finished","RSpec::Core::Example::ExecutionResult","RSpec/Core/Example/ExecutionResult.html#method-i-record_finished","(status, finished_at)","<p>@api private Records the finished status of the example.\n"],["register","RSpec::Core::Formatters","RSpec/Core/Formatters.html#method-c-register","(formatter_class, *notifications)","<p>Register the formatter class @param formatter_class [Class] formatter class to register @param notifications …\n"],["register","RSpec::Core::Hooks::HookCollections","RSpec/Core/Hooks/HookCollections.html#method-i-register","(prepend_or_append, position, *args, &block)",""],["register","RSpec::Core::Ordering::Registry","RSpec/Core/Ordering/Registry.html#method-i-register","(sym, strategy)",""],["register_global_singleton_context_hooks","RSpec::Core::Hooks::HookCollections","RSpec/Core/Hooks/HookCollections.html#method-i-register_global_singleton_context_hooks","(example, globals)",""],["register_globals","RSpec::Core::Hooks::HookCollections","RSpec/Core/Hooks/HookCollections.html#method-i-register_globals","(host, globals)",""],["register_listener","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-register_listener","(listener, *notifications)","<p>Registers a listener to a list of notifications. The reporter will send notification of events to all …\n"],["register_ordering","RSpec::Core::Ordering::ConfigurationManager","RSpec/Core/Ordering/ConfigurationManager.html#method-i-register_ordering","(name, strategy=Custom.new(Proc.new { |l| yield l }))",""],["registered_example_group_files","RSpec::Core::World","RSpec/Core/World.html#method-i-registered_example_group_files","()","<p>@private\n"],["registered_example_group_files","RSpec::Core::World::Null","RSpec/Core/World/Null.html#method-c-registered_example_group_files","()",""],["registered_listeners","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-registered_listeners","(notification)","<p>@private\n"],["relative_path","RSpec::Core::Metadata","RSpec/Core/Metadata.html#method-c-relative_path","(line)","<p>@api private\n<p>@param line [String] current code line @return [String] relative path to line\n"],["relative_path_regex","RSpec::Core::Metadata","RSpec/Core/Metadata.html#method-c-relative_path_regex","()","<p>Matches strings either at the beginning of the input or prefixed with a whitespace, containing the current …\n"],["remove_all_constants","RSpec::ExampleGroups","RSpec/ExampleGroups.html#method-c-remove_all_constants","()",""],["remove_example","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-remove_example","(example)","<p>Removes an example from the example group\n"],["remove_globally!","RSpec::Core::DSL","RSpec/Core/DSL.html#method-c-remove_globally-21","()","<p>Removes the describe method from Module and the top level binding. @api private\n"],["remove_globally!","RSpec::Core::SharedExampleGroup::TopLevelDSL","RSpec/Core/SharedExampleGroup/TopLevelDSL.html#method-c-remove_globally-21","()","<p>@api private\n<p>Removes the top level DSL methods to Module and the top level binding.\n"],["report","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-report","(expected_example_count)","<p>@overload report(count, &amp;block) @overload report(count, &amp;block) @param expected_example_count …\n"],["report_filter_message","RSpec::Core::World","RSpec/Core/World.html#method-i-report_filter_message","(message)","<p>@private\n"],["reporter","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-reporter","()","<p>@return [RSpec::Core::Reporter] the currently configured reporter\n"],["reporter","RSpec::Core::World","RSpec/Core/World.html#method-i-reporter","()","<p>@private\n"],["repro_command_for_currently_needed_ids","RSpec::Core::Bisect::ExampleMinimizer","RSpec/Core/Bisect/ExampleMinimizer.html#method-i-repro_command_for_currently_needed_ids","()",""],["repro_command_from","RSpec::Core::Bisect::ShellCommand","RSpec/Core/Bisect/ShellCommand.html#method-i-repro_command_from","(locations)",""],["requires=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-requires-3D","(paths)","<p>@private\n"],["rerun_argument","RSpec::Core::Example","RSpec/Core/Example.html#method-i-rerun_argument","()","<p>Returns the location-based argument that can be passed to the `rspec` command to rerun this example. …\n"],["reset","RSpec","RSpec.html#method-c-reset","()","<p>Used to ensure examples get reloaded and user configuration gets reset to defaults between multiple runs …\n"],["reset","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-reset","()","<p>@private\n"],["reset","RSpec::Core::World","RSpec/Core/World.html#method-i-reset","()","<p>@api private\n<p>Reset world to &#39;scratch&#39; before running suite.\n"],["reset_filters","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-reset_filters","()","<p>@private\n"],["reset_memoized","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-reset_memoized","()","<p>Clear memoized values when adding/removing examples @private\n"],["reset_reporter","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-reset_reporter","()","<p>@private\n"],["respond_to?","RSpec::Core::OutputWrapper","RSpec/Core/OutputWrapper.html#method-i-respond_to-3F","(name, priv=false)",""],["root","RSpec::Core::RubyProject","RSpec/Core/RubyProject.html#method-c-root","()",""],["run","RSpec::Core::Bisect::ForkRunner","RSpec/Core/Bisect/ForkRunner.html#method-i-run","(locations)",""],["run","RSpec::Core::Bisect::Server","RSpec/Core/Bisect/Server.html#method-c-run","()",""],["run","RSpec::Core::Bisect::ShellRunner","RSpec/Core/Bisect/ShellRunner.html#method-i-run","(locations)",""],["run","RSpec::Core::DRbRunner","RSpec/Core/DRbRunner.html#method-i-run","(err, out)",""],["run","RSpec::Core::Example","RSpec/Core/Example.html#method-i-run","(example_group_instance, reporter)","<p>@api private instance_execs the block passed to the constructor in the context of the instance of {ExampleGroup}. …\n"],["run","RSpec::Core::Example::Procsy","RSpec/Core/Example/Procsy.html#method-i-run","(*args, &block)",""],["run","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-run","(reporter=RSpec::Core::NullReporter)","<p>Runs all the examples in this group.\n"],["run","RSpec::Core::Hooks::AfterContextHook","RSpec/Core/Hooks/AfterContextHook.html#method-i-run","(example)",""],["run","RSpec::Core::Hooks::AfterHook","RSpec/Core/Hooks/AfterHook.html#method-i-run","(example)",""],["run","RSpec::Core::Hooks::BeforeHook","RSpec/Core/Hooks/BeforeHook.html#method-i-run","(example)",""],["run","RSpec::Core::Hooks::HookCollections","RSpec/Core/Hooks/HookCollections.html#method-i-run","(position, scope, example_or_group)","<p>@private\n<p>Runs all of the blocks stored with the hook in the context of the example. If no example is provided, …\n"],["run","RSpec::Core::ProjectInitializer","RSpec/Core/ProjectInitializer.html#method-i-run","()",""],["run","RSpec::Core::Runner","RSpec/Core/Runner.html#method-i-run","(err, out)","<p>Configures and runs a spec suite.\n<p>@param err [IO] error stream @param out [IO] output stream\n"],["run","RSpec::Core::Runner","RSpec/Core/Runner.html#method-c-run","(args, err=$stderr, out=$stdout)","<p>Run a suite of RSpec examples. Does not exit.\n<p>This is used internally by RSpec to run a suite, but is …\n"],["run_after_context_hooks","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-run_after_context_hooks","(example_group_instance)","<p>@private\n"],["run_before_context_hooks","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-run_before_context_hooks","(example_group_instance)","<p>@private\n"],["run_examples","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-run_examples","(reporter)","<p>@private\n"],["run_owned_hooks_for","RSpec::Core::Hooks::HookCollections","RSpec/Core/Hooks/HookCollections.html#method-i-run_owned_hooks_for","(position, scope, example_or_group)",""],["run_specs","RSpec::Core::Runner","RSpec/Core/Runner.html#method-i-run_specs","(example_groups)","<p>Runs the provided example groups.\n<p>@param example_groups [Array&lt;RSpec::Core::ExampleGroup&gt;] groups …\n"],["run_task","RSpec::Core::RakeTask","RSpec/Core/RakeTask.html#method-i-run_task","(verbose)","<p>@private\n"],["running_in_drb?","RSpec::Core::Runner","RSpec/Core/Runner.html#method-c-running_in_drb-3F","()","<p>@private\n"],["sandboxed","RSpec::Core::Sandbox","RSpec/Core/Sandbox.html#method-c-sandboxed","()","<p>Execute a provided block with RSpec global objects (configuration, world) reset.  This is used to test …\n"],["seed","RSpec::Core::Formatters::BaseTextFormatter","RSpec/Core/Formatters/BaseTextFormatter.html#method-i-seed","(notification)","<p>@private\n"],["seed","RSpec::Core::Formatters::JsonFormatter","RSpec/Core/Formatters/JsonFormatter.html#method-i-seed","(notification)",""],["seed=","RSpec::Core::Ordering::ConfigurationManager","RSpec/Core/Ordering/ConfigurationManager.html#method-i-seed-3D","(seed)",""],["seed_used?","RSpec::Core::Notifications::SeedNotification","RSpec/Core/Notifications/SeedNotification.html#method-i-seed_used-3F","()","<p>@api @return [Boolean] has the seed been used?\n"],["seed_used?","RSpec::Core::Ordering::ConfigurationManager","RSpec/Core/Ordering/ConfigurationManager.html#method-i-seed_used-3F","()",""],["send","RSpec::Core::Bisect::Channel","RSpec/Core/Bisect/Channel.html#method-i-send","(message)",""],["set_aggregate_failures_exception","RSpec::Core::Example","RSpec/Core/Example.html#method-i-set_aggregate_failures_exception","(exception)","<p>@private\n<p>Used to set the exception when `aggregate_failures` fails.\n"],["set_exception","RSpec::Core::Example","RSpec/Core/Example.html#method-i-set_exception","(exception)","<p>@private\n<p>Used internally to set an exception in an after hook, which captures the exception but doesn&#39;t …\n"],["set_exception","RSpec::Core::SuiteHookContext","RSpec/Core/SuiteHookContext.html#method-i-set_exception","(exception)","<p>rubocop:disable Naming/AccessorMethodName\n"],["set_it_up","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-set_it_up","(description, args, registration_collection, &example_group_block)","<p>@private\n"],["set_ivars","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-set_ivars","(instance, ivars)","<p>@private\n"],["setup","RSpec::Core::Runner","RSpec/Core/Runner.html#method-i-setup","(err, out)","<p>Wires together the various configuration objects and state holders.\n<p>@param err [IO] error stream @param …\n"],["setup_default","RSpec::Core::Formatters::Loader","RSpec/Core/Formatters/Loader.html#method-i-setup_default","(output_stream, deprecation_stream)","<p>@private\n"],["setup_mocks_for_rspec","RSpec::Core::MockingAdapters::Flexmock","RSpec/Core/MockingAdapters/Flexmock.html#method-i-setup_mocks_for_rspec","()",""],["setup_mocks_for_rspec","RSpec::Core::MockingAdapters::Mocha","RSpec/Core/MockingAdapters/Mocha.html#method-i-setup_mocks_for_rspec","()",""],["setup_mocks_for_rspec","RSpec::Core::MockingAdapters::Null","RSpec/Core/MockingAdapters/Null.html#method-i-setup_mocks_for_rspec","()",""],["setup_mocks_for_rspec","RSpec::Core::MockingAdapters::RR","RSpec/Core/MockingAdapters/RR.html#method-i-setup_mocks_for_rspec","()",""],["setup_mocks_for_rspec","RSpec::Core::MockingAdapters::RSpec","RSpec/Core/MockingAdapters/RSpec.html#method-i-setup_mocks_for_rspec","()",""],["shared_context","RSpec::Core::SharedExampleGroup","RSpec/Core/SharedExampleGroup.html#method-i-shared_context","(name, *args, &block)",""],["shared_context_metadata_behavior=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-shared_context_metadata_behavior-3D","(value)","<p>@see shared_context_metadata_behavior\n"],["shared_example_group_inclusions","RSpec::Core::SharedExampleGroupInclusionStackFrame","RSpec/Core/SharedExampleGroupInclusionStackFrame.html#method-c-shared_example_group_inclusions","()","<p>@private\n"],["shared_example_group_registry","RSpec::Core::World","RSpec/Core/World.html#method-i-shared_example_group_registry","()","<p>@private\n"],["shared_examples","RSpec::Core::SharedExampleGroup","RSpec/Core/SharedExampleGroup.html#method-i-shared_examples","(name, *args, &block)","<p>@overload shared_examples(name, &amp;block)\n\n<pre>@param name [String, Symbol, Module] identifer to use when ...</pre>\n"],["shared_examples","RSpec::Core::SharedExampleGroup::TopLevelDSL","RSpec/Core/SharedExampleGroup/TopLevelDSL.html#method-i-shared_examples","(name, *args, &block)",""],["shared_examples_for","RSpec::Core::SharedExampleGroup","RSpec/Core/SharedExampleGroup.html#method-i-shared_examples_for","(name, *args, &block)",""],["shell_allows_unquoted_ids?","RSpec::Core::ShellEscape","RSpec/Core/ShellEscape.html#method-i-shell_allows_unquoted_ids-3F","()",""],["should","RSpec::Core::MemoizedHelpers","RSpec/Core/MemoizedHelpers.html#method-i-should","(matcher=nil, message=nil)","<p>When `should` is called with no explicit receiver, the call is delegated to the object returned by `subject`. …\n"],["should_not","RSpec::Core::MemoizedHelpers","RSpec/Core/MemoizedHelpers.html#method-i-should_not","(matcher=nil, message=nil)","<p>Just like `should`, `should_not` delegates to the subject (implicit or explicit) of the example group. …\n"],["shutdown","RSpec::Core::Bisect::ForkRunner","RSpec/Core/Bisect/ForkRunner.html#method-i-shutdown","()",""],["silence_metadata_example_group_deprecations","RSpec::Core::MetadataFilter","RSpec/Core/MetadataFilter.html#method-c-silence_metadata_example_group_deprecations","()","<p>@private\n"],["singleton_class","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-i-singleton_class","()","<p>:nocov:  @private\n"],["skip","RSpec::Core::Pending","RSpec/Core/Pending.html#method-i-skip","(message=nil)","<p>@overload skip() @overload skip(message)\n<p>Marks an example as pending and skips execution.\n<p>@param message …\n"],["skip_with_exception","RSpec::Core::Example","RSpec/Core/Example.html#method-i-skip_with_exception","(reporter, exception)","<p>@private\n<p>Used internally to skip without actually executing the example when skip is used in before(:context). …\n"],["slow_duration","RSpec::Core::Notifications::ProfileNotification","RSpec/Core/Notifications/ProfileNotification.html#method-i-slow_duration","()","<p>@return [Float] the time taken (in seconds) to run the slowest examples\n"],["slowest_examples","RSpec::Core::Notifications::ProfileNotification","RSpec/Core/Notifications/ProfileNotification.html#method-i-slowest_examples","()","<p>@return [Array&lt;RSpec::Core::Example&gt;] the slowest examples\n"],["slowest_groups","RSpec::Core::Notifications::ProfileNotification","RSpec/Core/Notifications/ProfileNotification.html#method-i-slowest_groups","()","<p>@return [Array&lt;RSpec::Core::Example&gt;] the slowest example groups\n"],["snippet","RSpec::Core::Formatters::HtmlSnippetExtractor","RSpec/Core/Formatters/HtmlSnippetExtractor.html#method-i-snippet","(backtrace)","<p>@api private\n<p>Extract lines of code corresponding to  a backtrace.\n<p>@param backtrace [String] the backtrace …\n"],["snippet_for","RSpec::Core::Formatters::HtmlSnippetExtractor","RSpec/Core/Formatters/HtmlSnippetExtractor.html#method-i-snippet_for","(error_line)","<p>@api private\n<p>Create a snippet from a line of code.\n<p>@param error_line [String] file name with line number …\n"],["source_from_file","RSpec::Core::Formatters::SnippetExtractor","RSpec/Core/Formatters/SnippetExtractor.html#method-c-source_from_file","(path)",""],["source_from_file","RSpec::Core::World","RSpec/Core/World.html#method-i-source_from_file","(path)","<p>@private\n"],["spec_files_with_failures","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-spec_files_with_failures","()","<p>@private\n"],["spec_opts_without_bisect","RSpec::Core::Bisect::ShellCommand","RSpec/Core/Bisect/ShellCommand.html#method-i-spec_opts_without_bisect","()",""],["split_file_scoped_rules","RSpec::Core::InclusionRules","RSpec/Core/InclusionRules.html#method-i-split_file_scoped_rules","()",""],["standalone?","RSpec::Core::InclusionRules","RSpec/Core/InclusionRules.html#method-i-standalone-3F","()",""],["start","RSpec::Core::Bisect::ForkRunner","RSpec/Core/Bisect/ForkRunner.html#method-c-start","(shell_command, spec_runner)",""],["start","RSpec::Core::Bisect::Server","RSpec/Core/Bisect/Server.html#method-i-start","()",""],["start","RSpec::Core::Bisect::ShellRunner","RSpec/Core/Bisect/ShellRunner.html#method-c-start","(shell_command, _spec_runner)",""],["start","RSpec::Core::Formatters::BaseFormatter","RSpec/Core/Formatters/BaseFormatter.html#method-i-start","(notification)","<p>@api public\n<p>@param notification [StartNotification] @see RSpec::Core::Formatters::Protocol#start\n"],["start","RSpec::Core::Formatters::HtmlFormatter","RSpec/Core/Formatters/HtmlFormatter.html#method-i-start","(notification)",""],["start","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-start","(expected_example_count, time=RSpec::Core::Time.now)","<p>@private\n"],["start_dump","RSpec::Core::Formatters::BaseBisectFormatter","RSpec/Core/Formatters/BaseBisectFormatter.html#method-i-start_dump","(_notification)",""],["start_dump","RSpec::Core::Formatters::HtmlFormatter","RSpec/Core/Formatters/HtmlFormatter.html#method-i-start_dump","(_notification)",""],["start_dump","RSpec::Core::Formatters::ProgressFormatter","RSpec/Core/Formatters/ProgressFormatter.html#method-i-start_dump","(_notification)",""],["stash_deprecation_message","RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter","RSpec/Core/Formatters/DeprecationFormatter/DelayedPrinter.html#method-i-stash_deprecation_message","(deprecation_message)",""],["stop","RSpec::Core::Bisect::Server","RSpec/Core/Bisect/Server.html#method-i-stop","()",""],["stop","RSpec::Core::Formatters::JsonFormatter","RSpec/Core/Formatters/JsonFormatter.html#method-i-stop","(notification)",""],["stop","RSpec::Core::Reporter","RSpec/Core/Reporter.html#method-i-stop","()","<p>@private\n"],["store_before_context_ivars","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-store_before_context_ivars","(example_group_instance)","<p>@private\n"],["subclass","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-subclass","(parent, description, args, registration_collection, &example_group_block)","<p>@private\n"],["subject","RSpec::Core::MemoizedHelpers","RSpec/Core/MemoizedHelpers.html#method-i-subject","()","<p>@note `subject` was contributed by Joe Ferris to support the one-liner\n\n<pre>syntax embraced by shoulda matchers: ...</pre>\n"],["subject","RSpec::Core::MemoizedHelpers::ClassMethods","RSpec/Core/MemoizedHelpers/ClassMethods.html#method-i-subject","(name=nil, &block)","<p>Declares a `subject` for an example group which can then be wrapped with `expect` using `is_expected` …\n"],["subject!","RSpec::Core::MemoizedHelpers::ClassMethods","RSpec/Core/MemoizedHelpers/ClassMethods.html#method-i-subject-21","(name=nil, &block)","<p>Just like `subject`, except the block is invoked by an implicit `before` hook. This serves a dual purpose …\n"],["summarize","RSpec::Core::Formatters::DeprecationFormatter::FileStream","RSpec/Core/Formatters/DeprecationFormatter/FileStream.html#method-i-summarize","(summary_stream, deprecation_count)",""],["summarize","RSpec::Core::Formatters::DeprecationFormatter::RaiseErrorStream","RSpec/Core/Formatters/DeprecationFormatter/RaiseErrorStream.html#method-i-summarize","(summary_stream, deprecation_count)",""],["summary","RSpec::Core::MultipleExceptionError","RSpec/Core/MultipleExceptionError.html#method-i-summary","()","<p>@return [String] A summary of the failure, including the block label and a count of failures.\n"],["superclass_before_context_ivars","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-superclass_before_context_ivars","()","<p>@private\n"],["superclass_metadata","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-superclass_metadata","()","<p>@private @return [Metadata] belonging to the parent of a nested {ExampleGroup}\n"],["syntax_highlighter","RSpec::Core::World","RSpec/Core/World.html#method-i-syntax_highlighter","()","<p>@private\n"],["teardown_mocks_for_rspec","RSpec::Core::MockingAdapters::Flexmock","RSpec/Core/MockingAdapters/Flexmock.html#method-i-teardown_mocks_for_rspec","()",""],["teardown_mocks_for_rspec","RSpec::Core::MockingAdapters::Mocha","RSpec/Core/MockingAdapters/Mocha.html#method-i-teardown_mocks_for_rspec","()",""],["teardown_mocks_for_rspec","RSpec::Core::MockingAdapters::Null","RSpec/Core/MockingAdapters/Null.html#method-i-teardown_mocks_for_rspec","()",""],["teardown_mocks_for_rspec","RSpec::Core::MockingAdapters::RR","RSpec/Core/MockingAdapters/RR.html#method-i-teardown_mocks_for_rspec","()",""],["teardown_mocks_for_rspec","RSpec::Core::MockingAdapters::RSpec","RSpec/Core/MockingAdapters/RSpec.html#method-i-teardown_mocks_for_rspec","()",""],["to_h","RSpec::Core::HashImitatable","RSpec/Core/HashImitatable.html#method-i-to_h","()",""],["to_h","RSpec::Core::LegacyExampleGroupHash","RSpec/Core/LegacyExampleGroupHash.html#method-i-to_h","()",""],["to_proc","RSpec::Core::Example::Procsy","RSpec/Core/Example/Procsy.html#method-i-to_proc","()","<p>Provides a wrapped proc that will update our `executed?` state when executed.\n"],["to_s","RSpec::Core::Example","RSpec/Core/Example.html#method-i-to_s","()",""],["to_s","RSpec::Core::SharedExampleGroupModule","RSpec/Core/SharedExampleGroupModule.html#method-i-to_s","()",""],["top_level?","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-top_level-3F","()","<p>@private\n"],["top_level_description","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-top_level_description","()","<p>@private\n"],["totals_line","RSpec::Core::Notifications::SummaryNotification","RSpec/Core/Notifications/SummaryNotification.html#method-i-totals_line","()","<p>@api @return [String] A line summarising the result totals of the spec run.\n"],["trap_interrupt","RSpec::Core::Runner","RSpec/Core/Runner.html#method-c-trap_interrupt","()","<p>@private\n"],["traverse_example_group_trees_until","RSpec::Core::World","RSpec/Core/World.html#method-i-traverse_example_group_trees_until","(&block)","<p>@private Traverses the tree of each top level group. For each it yields the group, then the children, …\n"],["traverse_example_group_trees_until","RSpec::Core::World::Null","RSpec/Core/World/Null.html#method-c-traverse_example_group_trees_until","()",""],["traverse_tree_until","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-traverse_tree_until","(&block)","<p>@private Traverses the tree of groups, starting with `self`, then the children, recursively. Halts the …\n"],["treat_symbols_as_metadata_keys_with_true_values=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-treat_symbols_as_metadata_keys_with_true_values-3D","(_value)","<p>@deprecated This config option was added in RSpec 2 to pave the way\n\n<pre>for this being the default behavior ...</pre>\n"],["unclosed_tokens_in_line_range","RSpec::Core::Formatters::SnippetExtractor","RSpec/Core/Formatters/SnippetExtractor.html#method-i-unclosed_tokens_in_line_range","(line_range)",""],["update_inherited_metadata","RSpec::Core::Example","RSpec/Core/Example.html#method-i-update_inherited_metadata","(updates)","<p>@private\n"],["update_inherited_metadata","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-update_inherited_metadata","(updates)","<p>@private\n"],["use_only","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-use_only","(updated)",""],["use_only","RSpec::Core::FilterRules","RSpec/Core/FilterRules.html#method-i-use_only","(updated)",""],["used?","RSpec::Core::Ordering::Random","RSpec/Core/Ordering/Random.html#method-i-used-3F","()",""],["used_random_seed?","RSpec::Core::Ordering::Registry","RSpec/Core/Ordering/Registry.html#method-i-used_random_seed-3F","()",""],["verify_mocks_for_rspec","RSpec::Core::MockingAdapters::Flexmock","RSpec/Core/MockingAdapters/Flexmock.html#method-i-verify_mocks_for_rspec","()",""],["verify_mocks_for_rspec","RSpec::Core::MockingAdapters::Mocha","RSpec/Core/MockingAdapters/Mocha.html#method-i-verify_mocks_for_rspec","()",""],["verify_mocks_for_rspec","RSpec::Core::MockingAdapters::Null","RSpec/Core/MockingAdapters/Null.html#method-i-verify_mocks_for_rspec","()",""],["verify_mocks_for_rspec","RSpec::Core::MockingAdapters::RR","RSpec/Core/MockingAdapters/RR.html#method-i-verify_mocks_for_rspec","()",""],["verify_mocks_for_rspec","RSpec::Core::MockingAdapters::RSpec","RSpec/Core/MockingAdapters/RSpec.html#method-i-verify_mocks_for_rspec","()",""],["warn_deprecation","RSpec::Core::Warnings","RSpec/Core/Warnings.html#method-i-warn_deprecation","(message, opts={})","<p>@private\n<p>Used internally to print deprecation warnings.\n"],["warn_with","RSpec::Core::Warnings","RSpec/Core/Warnings.html#method-i-warn_with","(message, options={})","<p>@private\n"],["warnings=","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-warnings-3D","(value)","<p>Set Ruby warnings on or off.\n"],["warnings?","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-warnings-3F","()","<p>@return [Boolean] Whether or not ruby warnings are enabled.\n"],["when_first_matching_example_defined","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-when_first_matching_example_defined","(*filters)","<p>Defines a callback that runs after the first example with matching metadata is defined. If no examples …\n"],["with_clean_environment","RSpec::Core::RakeTask","RSpec/Core/RakeTask.html#method-i-with_clean_environment","()","<p>Run RSpec with a clean (empty) environment is not supported\n"],["with_clean_environment=","RSpec::Core::RakeTask","RSpec/Core/RakeTask.html#method-i-with_clean_environment-3D","(_value)","<p>Run RSpec with a clean (empty) environment is not supported\n"],["with_frame","RSpec::Core::SharedExampleGroupInclusionStackFrame","RSpec/Core/SharedExampleGroupInclusionStackFrame.html#method-c-with_frame","(name, location)","<p>@private\n"],["with_replaced_metadata","RSpec::Core::ExampleGroup","RSpec/Core/ExampleGroup.html#method-c-with_replaced_metadata","(meta)","<p>Temporarily replace the provided metadata. Intended primarily to allow an example group&#39;s singleton …\n"],["with_suite_hooks","RSpec::Core::Configuration","RSpec/Core/Configuration.html#method-i-with_suite_hooks","()","<p>@private\n"],["with_truncated_backtrace","RSpec::Core::Formatters::ExceptionPresenter::Factory::CommonBacktraceTruncater","RSpec/Core/Formatters/ExceptionPresenter/Factory/CommonBacktraceTruncater.html#method-i-with_truncated_backtrace","(child)",""],["world","RSpec","RSpec.html#method-c-world","()","<p>@private Internal container for global non-configuration data.\n"],["wrap","RSpec::Core::Example::Procsy","RSpec/Core/Example/Procsy.html#method-i-wrap","(&block)","<p>@private\n"],["wrap","RSpec::Core::Formatters::ConsoleCodes","RSpec/Core/Formatters/ConsoleCodes.html#method-i-wrap","(text, code_or_symbol)","<p>Wraps a piece of text in ANSI codes with the supplied code. Will only apply the control code if `RSpec.configuration.color_enabled?` …\n"],["wrap","RSpec::Core::Notifications::NullColorizer","RSpec/Core/Notifications/NullColorizer.html#method-i-wrap","(line, _code_or_symbol)",""]]}}